import Mathlib.Tactic.Basic
import Mathlib.Tactic.Attr.Register
import Mathlib.Data.Int.Cast.Basic
import Mathlib.Order.Basic
import Aeneas.Natify.Init
import Aeneas.Arith.Lemmas
import Aeneas.Std.Scalar

/-!
# `natify` tactic

The `natify` tactic is used to shift propositions about, e.g., `ZMod` or `BitVec`, to `Nat`.
This tactic is adapted from `zify`.
-/

namespace Aeneas.Natify

open Lean
open Lean.Meta
open Lean.Parser.Tactic
open Lean.Elab.Tactic
open Arith Std

syntax (name := natify) "natify" (simpArgs)? (location)? : tactic

macro_rules
| `(tactic| natify $[[$simpArgs,*]]? $[at $location]?) =>
  let args := simpArgs.map (·.getElems) |>.getD #[]
  `(tactic|
    simp -decide (maxDischargeDepth := 1) only [natify_simps, push_cast, $args,*] $[at $location]?)

/-- The `Simp.Context` generated by `natify`. -/
def mkNatifyContext (simpArgs : Option (Syntax.TSepArray `Lean.Parser.Tactic.simpStar ",")) :
    TacticM MkSimpContextResult := do
  let args := simpArgs.map (·.getElems) |>.getD #[]
  mkSimpContext
    (← `(tactic| simp -decide (maxDischargeDepth := 1) only [natify_simps, push_cast, $args,*])) false

attribute [natify_simps] BitVec.toNat_eq BitVec.lt_def BitVec.le_def
                         BitVec.toNat_umod BitVec.toNat_add BitVec.toNat_sub BitVec.toNat_mul
                         BitVec.toNat_ofNat BitVec.toNat_and BitVec.toNat_or BitVec.toNat_xor
attribute [natify_simps] ZMod.eq_iff_mod ZMod.val_add ZMod.val_sub ZMod.val_mul ZMod.val_sub'
                         ZMod.val_natCast ZMod.natCast_val
attribute [natify_simps] U8.bv_toNat U16.bv_toNat U32.bv_toNat U64.bv_toNat U128.bv_toNat Usize.bv_toNat UScalar.bv_toNat
attribute [natify_simps] Nat.cast_ofNat

example (x y : BitVec 32) (h : x.toNat = y.toNat) : x = y := by natify [h]

end Aeneas.Natify
