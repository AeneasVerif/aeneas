-- THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS
-- [loops_issues]
import Aeneas
open Aeneas.Std Result Error
set_option linter.dupNamespace false
set_option linter.hashCommand false
set_option linter.unusedVariables false

namespace loops_issues

/- [loops_issues::CARRAY]
   Source: 'tests/src/loops-issues.rs', lines 4:0-4:38 -/
@[global_simps]
def CARRAY_body : Result (Array U16 4#usize) := ok (Array.repeat 4#usize 0#u16)
@[global_simps, irreducible]
def CARRAY : Array U16 4#usize := eval_global CARRAY_body

/- [loops_issues::loop_access_array]: loop 0:
   Source: 'tests/src/loops-issues.rs', lines 9:4-12:5 -/
def loop_access_array_loop (k : Usize) (start : Usize) : Result Unit :=
  if start < 4#usize
  then
    do
    massert (k < 4#usize)
    let start1 ← start + 1#usize
    loop_access_array_loop k start1
  else ok ()
partial_fixpoint

/- [loops_issues::loop_access_array]:
   Source: 'tests/src/loops-issues.rs', lines 7:0-13:1 -/
@[reducible]
def loop_access_array (k : Usize) : Result Unit :=
  loop_access_array_loop k 0#usize

/- [loops_issues::loop_array_len]: loop 0:
   Source: 'tests/src/loops-issues.rs', lines 21:4-24:5 -/
def loop_array_len_loop : Result Unit :=
  loop_array_len_loop partial_fixpoint

/- [loops_issues::loop_array_len]:
   Source: 'tests/src/loops-issues.rs', lines 16:0-25:1 -/
def loop_array_len : Result Unit :=
  let buf := Array.repeat 4#usize 0#u8
  loop_array_len_loop

/- [loops_issues::write]:
   Source: 'tests/src/loops-issues.rs', lines 27:0-27:39 -/
def write (a : Array U8 4#usize) : Result (Array U8 4#usize) :=
  Array.update a 0#usize 0#u8

/- [loops_issues::loop_array_len_write]: loop 0:
   Source: 'tests/src/loops-issues.rs', lines 35:4-41:5 -/
def loop_array_len_write_loop
  (b : Bool) (buf : Array U8 4#usize) : Result Unit :=
  if b
  then do
       let buf1 ← write buf
       loop_array_len_write_loop true buf1
  else loop_array_len_write_loop false buf
partial_fixpoint

/- [loops_issues::loop_array_len_write]:
   Source: 'tests/src/loops-issues.rs', lines 30:0-42:1 -/
def loop_array_len_write (b : Bool) : Result Unit :=
  let buf := Array.repeat 4#usize 0#u8
  loop_array_len_write_loop b buf

/- [loops_issues::MAX_NROWS]
   Source: 'tests/src/loops-issues.rs', lines 44:0-44:27 -/
@[global_simps] def MAX_NROWS_body : Result Usize := ok 4#usize
@[global_simps, irreducible]
def MAX_NROWS : Usize := eval_global MAX_NROWS_body

/- [loops_issues::read_global_loop]: loop 0:
   Source: 'tests/src/loops-issues.rs', lines 50:4-50:11 -/
def read_global_loop_loop : Result Unit :=
  read_global_loop_loop
partial_fixpoint

/- [loops_issues::read_global_loop]:
   Source: 'tests/src/loops-issues.rs', lines 47:0-51:1 -/
def read_global_loop (n_rows : Usize) : Result Unit :=
  do
  massert (n_rows <= MAX_NROWS)
  read_global_loop_loop

end loops_issues
