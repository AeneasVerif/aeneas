-- THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS
-- [loops_adts]
import Aeneas
open Aeneas.Std Result Error
set_option linter.dupNamespace false
set_option linter.hashCommand false
set_option linter.unusedVariables false

namespace loops_adts

/- [loops_adts::List]
   Source: 'tests/src/loops-adts.rs', lines 3:0-6:1 -/
inductive List (T : Type) where
| Cons : T → List T → List T
| Nil : List T

/- [loops_adts::nth_shared]: loop 0:
   Source: 'tests/src/loops-adts.rs', lines 9:4-18:1 -/
def nth_shared_loop {T : Type} (ls : List T) (i : U32) : Result (Option T) :=
  match ls with
  | List.Cons x tl =>
    if i = 0#u32
    then ok (some x)
    else do
         let i1 ← i - 1#u32
         nth_shared_loop tl i1
  | List.Nil => ok none
partial_fixpoint

/- [loops_adts::nth_shared]:
   Source: 'tests/src/loops-adts.rs', lines 8:0-18:1 -/
@[reducible]
def nth_shared {T : Type} (ls : List T) (i : U32) : Result (Option T) :=
  nth_shared_loop ls i

/- [loops_adts::nth_mut]: loop 0:
   Source: 'tests/src/loops-adts.rs', lines 21:4-30:1 -/
def nth_mut_loop
  {T : Type} (ls : List T) (i : U32) :
  Result ((Option T) × (Option T → List T))
  :=
  match ls with
  | List.Cons x tl =>
    if i = 0#u32
    then
      ok (some x,
        fun ret =>
          let t := match ret with
                   | some t1 => t1
                   | _ => x
          List.Cons t tl)
    else
      do
      let i1 ← i - 1#u32
      let (o, back) ← nth_mut_loop tl i1
      let back1 := fun ret => let l := back ret
                              List.Cons x l
      ok (o, back1)
  | List.Nil => ok (none, fun ret => List.Nil)
partial_fixpoint

/- [loops_adts::nth_mut]:
   Source: 'tests/src/loops-adts.rs', lines 20:0-30:1 -/
@[reducible]
def nth_mut
  {T : Type} (ls : List T) (i : U32) :
  Result ((Option T) × (Option T → List T))
  :=
  nth_mut_loop ls i

/- [loops_adts::update_array_mut_borrow]:
   Source: 'tests/src/loops-adts.rs', lines 32:0-34:1 -/
def update_array_mut_borrow
  (a : Array U32 32#usize) :
  Result ((Array U32 32#usize) × (Array U32 32#usize → Array U32 32#usize))
  :=
  ok (a, fun ret => ret)

/- [loops_adts::array_mut_borrow_loop1]: loop 0:
   Source: 'tests/src/loops-adts.rs', lines 37:4-39:5 -/
def array_mut_borrow_loop1_loop
  (b : Bool) (a : Array U32 32#usize) : Result (Array U32 32#usize) :=
  if b
  then
    do
    let (a1, update_array_mut_borrow_back) ← update_array_mut_borrow a
    let back ← array_mut_borrow_loop1_loop true a1
    ok (update_array_mut_borrow_back back)
  else ok a
partial_fixpoint

/- [loops_adts::array_mut_borrow_loop1]:
   Source: 'tests/src/loops-adts.rs', lines 36:0-40:1 -/
@[reducible]
def array_mut_borrow_loop1
  (b : Bool) (a : Array U32 32#usize) : Result (Array U32 32#usize) :=
  array_mut_borrow_loop1_loop b a

/- [loops_adts::array_mut_borrow_loop2]: loop 0:
   Source: 'tests/src/loops-adts.rs', lines 43:4-45:5 -/
def array_mut_borrow_loop2_loop
  (b : Bool) (a : Array U32 32#usize) :
  Result ((Array U32 32#usize) × (Array U32 32#usize → Array U32 32#usize))
  :=
  if b
  then
    do
    let (a1, update_array_mut_borrow_back) ← update_array_mut_borrow a
    let (a2, back) ← array_mut_borrow_loop2_loop true a1
    let back1 := fun a3 => let a4 := back a3
                           update_array_mut_borrow_back a4
    ok (a2, back1)
  else ok (a, fun a1 => a1)
partial_fixpoint

/- [loops_adts::array_mut_borrow_loop2]:
   Source: 'tests/src/loops-adts.rs', lines 42:0-47:1 -/
@[reducible]
def array_mut_borrow_loop2
  (b : Bool) (a : Array U32 32#usize) :
  Result ((Array U32 32#usize) × (Array U32 32#usize → Array U32 32#usize))
  :=
  array_mut_borrow_loop2_loop b a

/- [loops_adts::copy_shared_array]:
   Source: 'tests/src/loops-adts.rs', lines 49:0-51:1 -/
def copy_shared_array (a : Array U32 32#usize) : Result (Array U32 32#usize) :=
  ok a

/- [loops_adts::array_shared_borrow_loop1]: loop 0:
   Source: 'tests/src/loops-adts.rs', lines 54:4-56:5 -/
def array_shared_borrow_loop1_loop
  (b : Bool) (a : Array U32 32#usize) : Result Unit :=
  if b
  then do
       let a1 ← copy_shared_array a
       array_shared_borrow_loop1_loop true a1
  else ok ()
partial_fixpoint

/- [loops_adts::array_shared_borrow_loop1]:
   Source: 'tests/src/loops-adts.rs', lines 53:0-57:1 -/
@[reducible]
def array_shared_borrow_loop1
  (b : Bool) (a : Array U32 32#usize) : Result Unit :=
  array_shared_borrow_loop1_loop b a

/- [loops_adts::array_shared_borrow_loop2]: loop 0:
   Source: 'tests/src/loops-adts.rs', lines 60:4-62:5 -/
def array_shared_borrow_loop2_loop
  (b : Bool) (a : Array U32 32#usize) : Result (Array U32 32#usize) :=
  if b
  then do
       let a1 ← copy_shared_array a
       array_shared_borrow_loop2_loop true a1
  else ok a
partial_fixpoint

/- [loops_adts::array_shared_borrow_loop2]:
   Source: 'tests/src/loops-adts.rs', lines 59:0-64:1 -/
@[reducible]
def array_shared_borrow_loop2
  (b : Bool) (a : Array U32 32#usize) : Result (Array U32 32#usize) :=
  array_shared_borrow_loop2_loop b a

end loops_adts
