-- THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS
-- [avl]: function definitions
import Aeneas
import Avl.Types
open Aeneas.Std Result Error
set_option linter.dupNamespace false
set_option linter.hashCommand false
set_option linter.unusedVariables false

namespace avl

/- [avl::{avl::Ord for i32}::cmp]:
   Source: 'src/avl.rs', lines 8:4-16:5 -/
def OrdI32.cmp (self : I32) (other : I32) : Result Ordering :=
  if self < other
  then ok Ordering.Less
  else if self = other
       then ok Ordering.Equal
       else ok Ordering.Greater

/- Trait implementation: [avl::{avl::Ord for i32}]
   Source: 'src/avl.rs', lines 7:0-17:1 -/
@[reducible]
def OrdI32 : Ord I32 := {
  cmp := OrdI32.cmp
}

/- [avl::{avl::Node<T>}#1::rotate_left]:
   Source: 'src/avl.rs', lines 41:4-90:5 -/
def Node.rotate_left
  {T : Type} (root : Node T) (z : Node T) : Result (Node T) :=
  let (b, o) := core.mem.replace z.left none
  let (x, root1) :=
    core.mem.replace (Node.mk root.value root.left b root.balance_factor)
      (Node.mk z.value o z.right z.balance_factor)
  if root1.balance_factor = 0#i8
  then
    ok (Node.mk root1.value (some (Node.mk x.value x.left x.right 1#i8))
      root1.right (-1)#i8)
  else
    ok (Node.mk root1.value (some (Node.mk x.value x.left x.right 0#i8))
      root1.right 0#i8)

/- [avl::{avl::Node<T>}#1::rotate_right]:
   Source: 'src/avl.rs', lines 92:4-136:5 -/
def Node.rotate_right
  {T : Type} (root : Node T) (z : Node T) : Result (Node T) :=
  let (b, o) := core.mem.replace z.right none
  let (x, root1) :=
    core.mem.replace (Node.mk root.value b root.right root.balance_factor)
      (Node.mk z.value z.left o z.balance_factor)
  if root1.balance_factor = 0#i8
  then
    ok (Node.mk root1.value root1.left (some (Node.mk x.value x.left 
      x.right (-1)#i8)) 1#i8)
  else
    ok (Node.mk root1.value root1.left (some (Node.mk x.value x.left 
      x.right 0#i8)) 0#i8)

/- [avl::{avl::Node<T>}#1::rotate_left_right]:
   Source: 'src/avl.rs', lines 138:4-186:5 -/
def Node.rotate_left_right
  {T : Type} (root : Node T) (z : Node T) : Result (Node T) :=
  do
  let (o, _) := core.mem.replace z.right none
  let y ← core.option.Option.unwrap o
  let (a, o1) := core.mem.replace y.left none
  let (b, o2) := core.mem.replace y.right none
  let (x, root1) :=
    core.mem.replace (Node.mk root.value b root.right root.balance_factor)
      (Node.mk y.value o1 o2 y.balance_factor)
  if root1.balance_factor = 0#i8
  then
    ok (Node.mk root1.value (some (Node.mk z.value z.left a 0#i8)) (some
      (Node.mk x.value x.left x.right 0#i8)) 0#i8)
  else
    if root1.balance_factor < 0#i8
    then
      ok (Node.mk root1.value (some (Node.mk z.value z.left a 0#i8)) (some
        (Node.mk x.value x.left x.right 1#i8)) 0#i8)
    else
      ok (Node.mk root1.value (some (Node.mk z.value z.left a (-1)#i8)) (some
        (Node.mk x.value x.left x.right 0#i8)) 0#i8)

/- [avl::{avl::Node<T>}#1::rotate_right_left]:
   Source: 'src/avl.rs', lines 188:4-236:5 -/
def Node.rotate_right_left
  {T : Type} (root : Node T) (z : Node T) : Result (Node T) :=
  do
  let (o, _) := core.mem.replace z.left none
  let y ← core.option.Option.unwrap o
  let (b, o1) := core.mem.replace y.left none
  let (a, o2) := core.mem.replace y.right none
  let (x, root1) :=
    core.mem.replace (Node.mk root.value root.left b root.balance_factor)
      (Node.mk y.value o1 o2 y.balance_factor)
  if root1.balance_factor = 0#i8
  then
    ok (Node.mk root1.value (some (Node.mk x.value x.left x.right 0#i8)) (some
      (Node.mk z.value a z.right 0#i8)) 0#i8)
  else
    if root1.balance_factor > 0#i8
    then
      ok (Node.mk root1.value (some (Node.mk x.value x.left x.right (-1)#i8))
        (some (Node.mk z.value a z.right 0#i8)) 0#i8)
    else
      ok (Node.mk root1.value (some (Node.mk x.value x.left x.right 0#i8))
        (some (Node.mk z.value a z.right 1#i8)) 0#i8)

/- [avl::{avl::Node<T>}#2::insert_in_left]:
   Source: 'src/avl.rs', lines 240:4-275:5 -/
mutual divergent def Node.insert_in_left
  {T : Type} (OrdInst : Ord T) (node : Node T) (value : T) :
  Result (Bool × (Node T))
  :=
  do
  let (b, o) ← Tree.insert_in_opt_node OrdInst node.left value
  if b
  then
    do
    let i ← node.balance_factor - 1#i8
    if i = (-2)#i8
    then
      do
      let (o1, o2) := core.mem.replace o none
      let left ← core.option.Option.unwrap o1
      if left.balance_factor <= 0#i8
      then
        do
        let node1 ←
          Node.rotate_right (Node.mk node.value o2 node.right i) left
        ok (false, node1)
      else
        do
        let node1 ←
          Node.rotate_left_right (Node.mk node.value o2 node.right i) left
        ok (false, node1)
    else ok (i != 0#i8, Node.mk node.value o node.right i)
  else ok (false, Node.mk node.value o node.right node.balance_factor)

/- [avl::{avl::Tree<T>}#3::insert_in_opt_node]:
   Source: 'src/avl.rs', lines 356:4-371:5 -/
divergent def Tree.insert_in_opt_node
  {T : Type} (OrdInst : Ord T) (node : Option (Node T)) (value : T) :
  Result (Bool × (Option (Node T)))
  :=
  match node with
  | none => let n := Node.mk value none none 0#i8
            ok (true, some n)
  | some node1 =>
    do
    let (b, node2) ← Node.insert OrdInst node1 value
    ok (b, some node2)

/- [avl::{avl::Node<T>}#2::insert_in_right]:
   Source: 'src/avl.rs', lines 277:4-315:5 -/
divergent def Node.insert_in_right
  {T : Type} (OrdInst : Ord T) (node : Node T) (value : T) :
  Result (Bool × (Node T))
  :=
  do
  let (b, o) ← Tree.insert_in_opt_node OrdInst node.right value
  if b
  then
    do
    let i ← node.balance_factor + 1#i8
    if i = 2#i8
    then
      do
      let (o1, o2) := core.mem.replace o none
      let right ← core.option.Option.unwrap o1
      if right.balance_factor >= 0#i8
      then
        do
        let node1 ←
          Node.rotate_left (Node.mk node.value node.left o2 i) right
        ok (false, node1)
      else
        do
        let node1 ←
          Node.rotate_right_left (Node.mk node.value node.left o2 i) right
        ok (false, node1)
    else ok (i != 0#i8, Node.mk node.value node.left o i)
  else ok (false, Node.mk node.value node.left o node.balance_factor)

/- [avl::{avl::Node<T>}#2::insert]:
   Source: 'src/avl.rs', lines 318:4-334:5 -/
divergent def Node.insert
  {T : Type} (OrdInst : Ord T) (node : Node T) (value : T) :
  Result (Bool × (Node T))
  :=
  do
  let ordering ← OrdInst.cmp value node.value
  match ordering with
  | Ordering.Less => Node.insert_in_left OrdInst node value
  | Ordering.Equal => ok (false, node)
  | Ordering.Greater => Node.insert_in_right OrdInst node value

end

/- [avl::{avl::Tree<T>}#3::new]:
   Source: 'src/avl.rs', lines 338:4-340:5 -/
def Tree.new {T : Type} (OrdInst : Ord T) : Result (Tree T) :=
  ok { root := none }

/- [avl::{avl::Tree<T>}#3::find]: loop 0:
   Source: 'src/avl.rs', lines 345:8-354:5 -/
divergent def Tree.find_loop
  {T : Type} (OrdInst : Ord T) (value : T) (current_tree : Option (Node T)) :
  Result Bool
  :=
  match current_tree with
  | none => ok false
  | some current_node =>
    do
    let o ← OrdInst.cmp current_node.value value
    match o with
    | Ordering.Less => Tree.find_loop OrdInst value current_node.right
    | Ordering.Equal => ok true
    | Ordering.Greater => Tree.find_loop OrdInst value current_node.left

/- [avl::{avl::Tree<T>}#3::find]:
   Source: 'src/avl.rs', lines 342:4-354:5 -/
@[reducible]
def Tree.find
  {T : Type} (OrdInst : Ord T) (self : Tree T) (value : T) : Result Bool :=
  Tree.find_loop OrdInst value self.root

/- [avl::{avl::Tree<T>}#3::insert]:
   Source: 'src/avl.rs', lines 374:4-376:5 -/
def Tree.insert
  {T : Type} (OrdInst : Ord T) (self : Tree T) (value : T) :
  Result (Bool × (Tree T))
  :=
  do
  let (b, o) ← Tree.insert_in_opt_node OrdInst self.root value
  ok (b, { root := o })

end avl
