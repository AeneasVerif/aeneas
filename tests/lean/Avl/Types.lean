-- THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS
-- [avl]: type definitions
import Base
open Primitives
set_option linter.dupNamespace false
set_option linter.hashCommand false
set_option linter.unusedVariables false

namespace avl

/- [avl::Ordering]
   Source: 'src/avl.rs', lines 19:0-23:1 -/
inductive Ordering where
| Less : Ordering
| Equal : Ordering
| Greater : Ordering

/- Trait declaration: [avl::Ord]
   Source: 'src/avl.rs', lines 25:0-27:1 -/
structure Ord (Self : Type) where
  cmp : Self → Self → Result Ordering

/- [avl::Node]
   Source: 'src/avl.rs', lines 29:0-34:1 -/
inductive Node (T : Type) where
| mk : T → Option (Node T) → Option (Node T) → I8 → Node T

def Node.value {T : Type} (x : Node T) := match x with | Node.mk x1 _ _ _ => x1

def Node.left {T : Type} (x : Node T) := match x with | Node.mk _ x1 _ _ => x1

def Node.right {T : Type} (x : Node T) := match x with | Node.mk _ _ x1 _ => x1

def Node.balance_factor {T : Type} (x : Node T) :=
  match x with | Node.mk _ _ _ x1 => x1

@[simp]
theorem Node.value._simpLemma_ {T : Type} (value : T) (left : Option (Node T))
  (right : Option (Node T)) (balance_factor : I8) :
  (Node.mk value left right balance_factor).value = value := by rfl

@[simp]
theorem Node.left._simpLemma_ {T : Type} (value : T) (left : Option (Node T))
  (right : Option (Node T)) (balance_factor : I8) :
  (Node.mk value left right balance_factor).left = left := by rfl

@[simp]
theorem Node.right._simpLemma_ {T : Type} (value : T) (left : Option (Node T))
  (right : Option (Node T)) (balance_factor : I8) :
  (Node.mk value left right balance_factor).right = right := by rfl

@[simp]
theorem Node.balance_factor._simpLemma_ {T : Type} (value : T) (left : Option
  (Node T)) (right : Option (Node T)) (balance_factor : I8) :
  (Node.mk value left right balance_factor).balance_factor = balance_factor :=
  by rfl

/- [avl::Tree]
   Source: 'src/avl.rs', lines 36:0-38:1 -/
structure Tree (T : Type) where
  root : Option (Node T)

end avl
