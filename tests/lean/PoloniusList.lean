-- THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS
-- [polonius_list]
import Base
open Primitives

namespace polonius_list

/- [polonius_list::List]
   Source: 'tests/src/polonius_list.rs', lines 5:0-5:16 -/
inductive List (T : Type) :=
| Cons : T → List T → List T
| Nil : List T

/- [polonius_list::get_list_at_x]:
   Source: 'tests/src/polonius_list.rs', lines 15:0-15:76 -/
divergent def get_list_at_x
  (ls : List U32) (x : U32) :
  Result ((List U32) × (List U32 → Result (List U32)))
  :=
  match ls with
  | List.Cons hd tl =>
    if hd = x
    then Result.ok (List.Cons hd tl, Result.ok)
    else
      do
      let (l, get_list_at_x_back) ← get_list_at_x tl x
      let back :=
        fun ret =>
          do
          let tl1 ← get_list_at_x_back ret
          Result.ok (List.Cons hd tl1)
      Result.ok (l, back)
  | List.Nil => Result.ok (List.Nil, Result.ok)

end polonius_list
