-- THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS
-- [demo]
import Base
open Primitives

namespace demo

/- [demo::choose]:
   Source: 'src/demo.rs', lines 5:0-5:70 -/
def choose
  (T : Type) (b : Bool) (x : T) (y : T) :
  Result (T × (T → Result (T × T)))
  :=
  if b
  then let back := fun ret => Result.ret (ret, y)
       Result.ret (x, back)
  else let back := fun ret => Result.ret (x, ret)
       Result.ret (y, back)

/- [demo::mul3_add1]:
   Source: 'src/demo.rs', lines 13:0-13:31 -/
def mul3_add1 (x : U32) : Result U32 :=
  do
  let i ← x + x
  let i1 ← i + x
  i1 + 1#u32

/- [demo::use_mul3_add1]:
   Source: 'src/demo.rs', lines 17:0-17:43 -/
def use_mul3_add1 (x : U32) (y : U32) : Result U32 :=
  do
  let i ← mul3_add1 x
  i + y

/- [demo::incr]:
   Source: 'src/demo.rs', lines 21:0-21:31 -/
def incr (x : U32) : Result U32 :=
  x + 1#u32

/- [demo::use_incr]:
   Source: 'src/demo.rs', lines 25:0-25:17 -/
def use_incr : Result Unit :=
  do
  let x ← incr 0#u32
  let x1 ← incr x
  let _ ← incr x1
  Result.ret ()

/- [demo::CList]
   Source: 'src/demo.rs', lines 34:0-34:17 -/
inductive CList (T : Type) :=
| CCons : T → CList T → CList T
| CNil : CList T

/- [demo::list_nth]:
   Source: 'src/demo.rs', lines 39:0-39:56 -/
divergent def list_nth (T : Type) (l : CList T) (i : U32) : Result T :=
  match l with
  | CList.CCons x tl =>
    if i = 0#u32
    then Result.ret x
    else do
         let i1 ← i - 1#u32
         list_nth T tl i1
  | CList.CNil => Result.fail .panic

/- [demo::list_nth1]: loop 0:
   Source: 'src/demo.rs', lines 54:0-63:1 -/
divergent def list_nth1_loop (T : Type) (l : CList T) (i : U32) : Result T :=
  match l with
  | CList.CCons x tl =>
    if i = 0#u32
    then Result.ret x
    else do
         let i1 ← i - 1#u32
         list_nth1_loop T tl i1
  | CList.CNil => Result.fail .panic

/- [demo::list_nth1]:
   Source: 'src/demo.rs', lines 54:0-54:65 -/
def list_nth1 (T : Type) (l : CList T) (i : U32) : Result T :=
  list_nth1_loop T l i

/- Trait declaration: [demo::Counter]
   Source: 'src/demo.rs', lines 67:0-67:17 -/
structure Counter (Self : Type) where
  incr : Self → Result (Usize × Self)

/- [demo::{(demo::Counter for usize)}::incr]:
   Source: 'src/demo.rs', lines 72:4-72:31 -/
def CounterUsize.incr (self : Usize) : Result (Usize × Usize) :=
  do
  let self1 ← self + 1#usize
  Result.ret (self, self1)

/- Trait implementation: [demo::{(demo::Counter for usize)}]
   Source: 'src/demo.rs', lines 71:0-71:22 -/
def CounterUsize : Counter Usize := {
  incr := CounterUsize.incr
}

/- [demo::use_counter]:
   Source: 'src/demo.rs', lines 79:0-79:59 -/
def use_counter
  (T : Type) (CounterInst : Counter T) (cnt : T) : Result (Usize × T) :=
  do
  let (_, cnt1) ← CounterInst.incr cnt
  CounterInst.incr cnt1

end demo
