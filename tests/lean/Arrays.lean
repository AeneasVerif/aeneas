-- THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS
-- [arrays]
import Aeneas
open Aeneas.Std
set_option linter.dupNamespace false
set_option linter.hashCommand false
set_option linter.unusedVariables false

namespace arrays

/- [arrays::AB]
   Source: 'tests/src/arrays.rs', lines 6:0-9:1 -/
inductive AB where
| A : AB
| B : AB

/- [arrays::incr]:
   Source: 'tests/src/arrays.rs', lines 11:0-13:1 -/
def incr (x : U32) : Result U32 :=
  x + 1#u32

/- [arrays::array_to_shared_slice_]:
   Source: 'tests/src/arrays.rs', lines 19:0-21:1 -/
def array_to_shared_slice_
  {T : Type} (s : Array T 32#usize) : Result (Slice T) :=
  Array.to_slice s

/- [arrays::array_to_mut_slice_]:
   Source: 'tests/src/arrays.rs', lines 24:0-26:1 -/
def array_to_mut_slice_
  {T : Type} (s : Array T 32#usize) :
  Result ((Slice T) × (Slice T → Array T 32#usize))
  :=
  Array.to_slice_mut s

/- [arrays::array_len]:
   Source: 'tests/src/arrays.rs', lines 28:0-30:1 -/
def array_len {T : Type} (s : Array T 32#usize) : Result Usize :=
  do
  let s1 ← Array.to_slice s
  Result.ok (Slice.len s1)

/- [arrays::shared_array_len]:
   Source: 'tests/src/arrays.rs', lines 32:0-34:1 -/
def shared_array_len {T : Type} (s : Array T 32#usize) : Result Usize :=
  do
  let s1 ← Array.to_slice s
  Result.ok (Slice.len s1)

/- [arrays::shared_slice_len]:
   Source: 'tests/src/arrays.rs', lines 36:0-38:1 -/
def shared_slice_len {T : Type} (s : Slice T) : Result Usize :=
  Result.ok (Slice.len s)

/- [arrays::index_array_shared]:
   Source: 'tests/src/arrays.rs', lines 40:0-42:1 -/
def index_array_shared
  {T : Type} (s : Array T 32#usize) (i : Usize) : Result T :=
  Array.index_usize s i

/- [arrays::index_array_u32]:
   Source: 'tests/src/arrays.rs', lines 47:0-49:1 -/
def index_array_u32 (s : Array U32 32#usize) (i : Usize) : Result U32 :=
  Array.index_usize s i

/- [arrays::index_array_copy]:
   Source: 'tests/src/arrays.rs', lines 51:0-53:1 -/
def index_array_copy (x : Array U32 32#usize) : Result U32 :=
  Array.index_usize x 0#usize

/- [arrays::index_mut_array]:
   Source: 'tests/src/arrays.rs', lines 55:0-57:1 -/
def index_mut_array
  {T : Type} (s : Array T 32#usize) (i : Usize) :
  Result (T × (T → Array T 32#usize))
  :=
  Array.index_mut_usize s i

/- [arrays::index_slice]:
   Source: 'tests/src/arrays.rs', lines 59:0-61:1 -/
def index_slice {T : Type} (s : Slice T) (i : Usize) : Result T :=
  Slice.index_usize s i

/- [arrays::index_mut_slice]:
   Source: 'tests/src/arrays.rs', lines 63:0-65:1 -/
def index_mut_slice
  {T : Type} (s : Slice T) (i : Usize) : Result (T × (T → Slice T)) :=
  Slice.index_mut_usize s i

/- [arrays::slice_subslice_shared_]:
   Source: 'tests/src/arrays.rs', lines 67:0-69:1 -/
def slice_subslice_shared_
  (x : Slice U32) (y : Usize) (z : Usize) : Result (Slice U32) :=
  core.slice.index.Slice.index (core.slice.index.SliceIndexRangeUsizeSliceTInst
    U32) x { start := y, end_ := z }

/- [arrays::slice_subslice_mut_]:
   Source: 'tests/src/arrays.rs', lines 71:0-73:1 -/
def slice_subslice_mut_
  (x : Slice U32) (y : Usize) (z : Usize) :
  Result ((Slice U32) × (Slice U32 → Slice U32))
  :=
  core.slice.index.Slice.index_mut
    (core.slice.index.SliceIndexRangeUsizeSliceTInst U32) x
    { start := y, end_ := z }

/- [arrays::array_to_slice_shared_]:
   Source: 'tests/src/arrays.rs', lines 75:0-77:1 -/
def array_to_slice_shared_ (x : Array U32 32#usize) : Result (Slice U32) :=
  Array.to_slice x

/- [arrays::array_to_slice_mut_]:
   Source: 'tests/src/arrays.rs', lines 79:0-81:1 -/
def array_to_slice_mut_
  (x : Array U32 32#usize) :
  Result ((Slice U32) × (Slice U32 → Array U32 32#usize))
  :=
  Array.to_slice_mut x

/- [arrays::array_subslice_shared_]:
   Source: 'tests/src/arrays.rs', lines 83:0-85:1 -/
def array_subslice_shared_
  (x : Array U32 32#usize) (y : Usize) (z : Usize) : Result (Slice U32) :=
  core.array.Array.index (core.ops.index.IndexSliceTIInst
    (core.slice.index.SliceIndexRangeUsizeSliceTInst U32)) x
    { start := y, end_ := z }

/- [arrays::array_subslice_mut_]:
   Source: 'tests/src/arrays.rs', lines 87:0-89:1 -/
def array_subslice_mut_
  (x : Array U32 32#usize) (y : Usize) (z : Usize) :
  Result ((Slice U32) × (Slice U32 → Array U32 32#usize))
  :=
  core.array.Array.index_mut (core.ops.index.IndexMutSliceTIInst
    (core.slice.index.SliceIndexRangeUsizeSliceTInst U32)) x
    { start := y, end_ := z }

/- [arrays::index_slice_0]:
   Source: 'tests/src/arrays.rs', lines 91:0-93:1 -/
def index_slice_0 {T : Type} (s : Slice T) : Result T :=
  Slice.index_usize s 0#usize

/- [arrays::index_array_0]:
   Source: 'tests/src/arrays.rs', lines 95:0-97:1 -/
def index_array_0 {T : Type} (s : Array T 32#usize) : Result T :=
  Array.index_usize s 0#usize

/- [arrays::index_index_array]:
   Source: 'tests/src/arrays.rs', lines 106:0-108:1 -/
def index_index_array
  (s : Array (Array U32 32#usize) 32#usize) (i : Usize) (j : Usize) :
  Result U32
  :=
  do
  let a ← Array.index_usize s i
  Array.index_usize a j

/- [arrays::update_update_array]:
   Source: 'tests/src/arrays.rs', lines 117:0-119:1 -/
def update_update_array
  (s : Array (Array U32 32#usize) 32#usize) (i : Usize) (j : Usize) :
  Result (Array (Array U32 32#usize) 32#usize)
  :=
  do
  let (a, index_mut_back) ← Array.index_mut_usize s i
  let a1 ← Array.update_usize a j 0#u32
  Result.ok (index_mut_back a1)

/- [arrays::array_local_deep_copy]:
   Source: 'tests/src/arrays.rs', lines 121:0-123:1 -/
def array_local_deep_copy (x : Array U32 32#usize) : Result Unit :=
  Result.ok ()

/- [arrays::take_array]:
   Source: 'tests/src/arrays.rs', lines 125:0-125:33 -/
def take_array (a : Array U32 2#usize) : Result Unit :=
  Result.ok ()

/- [arrays::take_array_borrow]:
   Source: 'tests/src/arrays.rs', lines 126:0-126:41 -/
def take_array_borrow (a : Array U32 2#usize) : Result Unit :=
  Result.ok ()

/- [arrays::take_slice]:
   Source: 'tests/src/arrays.rs', lines 127:0-127:31 -/
def take_slice (s : Slice U32) : Result Unit :=
  Result.ok ()

/- [arrays::take_mut_slice]:
   Source: 'tests/src/arrays.rs', lines 128:0-128:39 -/
def take_mut_slice (s : Slice U32) : Result (Slice U32) :=
  Result.ok s

/- [arrays::const_array]:
   Source: 'tests/src/arrays.rs', lines 130:0-132:1 -/
def const_array : Result (Array U32 2#usize) :=
  Result.ok (Array.make 2#usize [ 0#u32, 0#u32 ])

/- [arrays::const_slice]:
   Source: 'tests/src/arrays.rs', lines 134:0-136:1 -/
def const_slice : Result Unit :=
  do
  let _ ← Array.to_slice (Array.make 2#usize [ 0#u32, 0#u32 ])
  Result.ok ()

/- [arrays::take_all]:
   Source: 'tests/src/arrays.rs', lines 144:0-156:1 -/
def take_all : Result Unit :=
  do
  take_array (Array.make 2#usize [ 0#u32, 0#u32 ])
  take_array (Array.make 2#usize [ 0#u32, 0#u32 ])
  take_array_borrow (Array.make 2#usize [ 0#u32, 0#u32 ])
  let s ← Array.to_slice (Array.make 2#usize [ 0#u32, 0#u32 ])
  take_slice s
  let (s1, _) ← Array.to_slice_mut (Array.make 2#usize [ 0#u32, 0#u32 ])
  let _ ← take_mut_slice s1
  Result.ok ()

/- [arrays::index_array]:
   Source: 'tests/src/arrays.rs', lines 158:0-160:1 -/
def index_array (x : Array U32 2#usize) : Result U32 :=
  Array.index_usize x 0#usize

/- [arrays::index_array_borrow]:
   Source: 'tests/src/arrays.rs', lines 161:0-163:1 -/
def index_array_borrow (x : Array U32 2#usize) : Result U32 :=
  Array.index_usize x 0#usize

/- [arrays::index_slice_u32_0]:
   Source: 'tests/src/arrays.rs', lines 165:0-167:1 -/
def index_slice_u32_0 (x : Slice U32) : Result U32 :=
  Slice.index_usize x 0#usize

/- [arrays::index_mut_slice_u32_0]:
   Source: 'tests/src/arrays.rs', lines 169:0-171:1 -/
def index_mut_slice_u32_0 (x : Slice U32) : Result (U32 × (Slice U32)) :=
  do
  let i ← Slice.index_usize x 0#usize
  Result.ok (i, x)

/- [arrays::index_all]:
   Source: 'tests/src/arrays.rs', lines 173:0-185:1 -/
def index_all : Result U32 :=
  do
  let i ← index_array (Array.make 2#usize [ 0#u32, 0#u32 ])
  let i1 ← index_array (Array.make 2#usize [ 0#u32, 0#u32 ])
  let i2 ← i + i1
  let i3 ← index_array_borrow (Array.make 2#usize [ 0#u32, 0#u32 ])
  let i4 ← i2 + i3
  let s ← Array.to_slice (Array.make 2#usize [ 0#u32, 0#u32 ])
  let i5 ← index_slice_u32_0 s
  let i6 ← i4 + i5
  let (s1, _) ← Array.to_slice_mut (Array.make 2#usize [ 0#u32, 0#u32 ])
  let (i7, _) ← index_mut_slice_u32_0 s1
  i6 + i7

/- [arrays::update_array]:
   Source: 'tests/src/arrays.rs', lines 187:0-189:1 -/
def update_array (x : Array U32 2#usize) : Result Unit :=
  do
  let _ ← Array.index_mut_usize x 0#usize
  Result.ok ()

/- [arrays::update_array_mut_borrow]:
   Source: 'tests/src/arrays.rs', lines 190:0-192:1 -/
def update_array_mut_borrow
  (x : Array U32 2#usize) : Result (Array U32 2#usize) :=
  do
  let (_, index_mut_back) ← Array.index_mut_usize x 0#usize
  Result.ok (index_mut_back 1#u32)

/- [arrays::update_mut_slice]:
   Source: 'tests/src/arrays.rs', lines 193:0-195:1 -/
def update_mut_slice (x : Slice U32) : Result (Slice U32) :=
  do
  let (_, index_mut_back) ← Slice.index_mut_usize x 0#usize
  Result.ok (index_mut_back 1#u32)

/- [arrays::update_all]:
   Source: 'tests/src/arrays.rs', lines 197:0-203:1 -/
def update_all : Result Unit :=
  do
  update_array (Array.make 2#usize [ 0#u32, 0#u32 ])
  update_array (Array.make 2#usize [ 0#u32, 0#u32 ])
  let x ← update_array_mut_borrow (Array.make 2#usize [ 0#u32, 0#u32 ])
  let (s, _) ← Array.to_slice_mut x
  let _ ← update_mut_slice s
  Result.ok ()

/- [arrays::incr_array]:
   Source: 'tests/src/arrays.rs', lines 205:0-207:1 -/
def incr_array (x : Array U32 2#usize) : Result (Array U32 2#usize) :=
  do
  let i ← Array.index_usize x 0#usize
  let i1 ← i + 1#u32
  let (_, index_mut_back) ← Array.index_mut_usize x 0#usize
  Result.ok (index_mut_back i1)

/- [arrays::incr_slice]:
   Source: 'tests/src/arrays.rs', lines 209:0-211:1 -/
def incr_slice (x : Slice U32) : Result (Slice U32) :=
  do
  let i ← Slice.index_usize x 0#usize
  let i1 ← i + 1#u32
  let (_, index_mut_back) ← Slice.index_mut_usize x 0#usize
  Result.ok (index_mut_back i1)

/- [arrays::range_all]:
   Source: 'tests/src/arrays.rs', lines 216:0-220:1 -/
def range_all : Result Unit :=
  do
  let (s, _) ←
    core.array.Array.index_mut (core.ops.index.IndexMutSliceTIInst
      (core.slice.index.SliceIndexRangeUsizeSliceTInst U32))
      (Array.make 4#usize [ 0#u32, 0#u32, 0#u32, 0#u32 ])
      { start := 1#usize, end_ := 3#usize }
  let _ ← update_mut_slice s
  Result.ok ()

/- [arrays::deref_array_borrow]:
   Source: 'tests/src/arrays.rs', lines 225:0-228:1 -/
def deref_array_borrow (x : Array U32 2#usize) : Result U32 :=
  Array.index_usize x 0#usize

/- [arrays::deref_array_mut_borrow]:
   Source: 'tests/src/arrays.rs', lines 230:0-233:1 -/
def deref_array_mut_borrow
  (x : Array U32 2#usize) : Result (U32 × (Array U32 2#usize)) :=
  do
  let i ← Array.index_usize x 0#usize
  Result.ok (i, x)

/- [arrays::take_array_t]:
   Source: 'tests/src/arrays.rs', lines 238:0-238:34 -/
def take_array_t (a : Array AB 2#usize) : Result Unit :=
  Result.ok ()

/- [arrays::non_copyable_array]:
   Source: 'tests/src/arrays.rs', lines 240:0-248:1 -/
def non_copyable_array : Result Unit :=
  take_array_t (Array.make 2#usize [ AB.A, AB.B ])

/- [arrays::sum]: loop 0:
   Source: 'tests/src/arrays.rs', lines 256:4-259:5 -/
divergent def sum_loop (s : Slice U32) (sum1 : U32) (i : Usize) : Result U32 :=
  let i1 := Slice.len s
  if i < i1
  then
    do
    let i2 ← Slice.index_usize s i
    let sum3 ← sum1 + i2
    let i3 ← i + 1#usize
    sum_loop s sum3 i3
  else Result.ok sum1

/- [arrays::sum]:
   Source: 'tests/src/arrays.rs', lines 253:0-261:1 -/
def sum (s : Slice U32) : Result U32 :=
  sum_loop s 0#u32 0#usize

/- [arrays::sum2]: loop 0:
   Source: 'tests/src/arrays.rs', lines 267:4-270:5 -/
divergent def sum2_loop
  (s : Slice U32) (s2 : Slice U32) (sum1 : U32) (i : Usize) : Result U32 :=
  let i1 := Slice.len s
  if i < i1
  then
    do
    let i2 ← Slice.index_usize s i
    let i3 ← Slice.index_usize s2 i
    let i4 ← i2 + i3
    let sum3 ← sum1 + i4
    let i5 ← i + 1#usize
    sum2_loop s s2 sum3 i5
  else Result.ok sum1

/- [arrays::sum2]:
   Source: 'tests/src/arrays.rs', lines 263:0-272:1 -/
def sum2 (s : Slice U32) (s2 : Slice U32) : Result U32 :=
  do
  let i := Slice.len s
  let i1 := Slice.len s2
  massert (i = i1)
  sum2_loop s s2 0#u32 0#usize

/- [arrays::f0]:
   Source: 'tests/src/arrays.rs', lines 274:0-277:1 -/
def f0 : Result Unit :=
  do
  let (s, _) ← Array.to_slice_mut (Array.make 2#usize [ 1#u32, 2#u32 ])
  let _ ← Slice.index_mut_usize s 0#usize
  Result.ok ()

/- [arrays::f1]:
   Source: 'tests/src/arrays.rs', lines 279:0-282:1 -/
def f1 : Result Unit :=
  do
  let _ ← Array.index_mut_usize (Array.make 2#usize [ 1#u32, 2#u32 ]) 0#usize
  Result.ok ()

/- [arrays::f2]:
   Source: 'tests/src/arrays.rs', lines 284:0-284:20 -/
def f2 (i : U32) : Result Unit :=
  Result.ok ()

/- [arrays::f4]:
   Source: 'tests/src/arrays.rs', lines 293:0-295:1 -/
def f4 (x : Array U32 32#usize) (y : Usize) (z : Usize) : Result (Slice U32) :=
  core.array.Array.index (core.ops.index.IndexSliceTIInst
    (core.slice.index.SliceIndexRangeUsizeSliceTInst U32)) x
    { start := y, end_ := z }

/- [arrays::f3]:
   Source: 'tests/src/arrays.rs', lines 286:0-291:1 -/
def f3 : Result U32 :=
  do
  let i ← Array.index_usize (Array.make 2#usize [ 1#u32, 2#u32 ]) 0#usize
  f2 i
  let b := Array.repeat 32#usize 0#u32
  let s ← Array.to_slice (Array.make 2#usize [ 1#u32, 2#u32 ])
  let s1 ← f4 b 16#usize 18#usize
  sum2 s s1

/- [arrays::SZ]
   Source: 'tests/src/arrays.rs', lines 297:0-297:25 -/
def SZ_body : Result Usize := Result.ok 32#usize
def SZ : Usize := eval_global SZ_body

/- [arrays::f5]:
   Source: 'tests/src/arrays.rs', lines 300:0-302:1 -/
def f5 (x : Array U32 32#usize) : Result U32 :=
  Array.index_usize x 0#usize

/- [arrays::ite]:
   Source: 'tests/src/arrays.rs', lines 305:0-312:1 -/
def ite : Result Unit :=
  do
  let (s, _) ← Array.to_slice_mut (Array.make 2#usize [ 0#u32, 0#u32 ])
  let _ ← index_mut_slice_u32_0 s
  let (s1, _) ← Array.to_slice_mut (Array.make 2#usize [ 0#u32, 0#u32 ])
  let _ ← index_mut_slice_u32_0 s1
  Result.ok ()

/- [arrays::zero_slice]: loop 0:
   Source: 'tests/src/arrays.rs', lines 317:4-320:5 -/
divergent def zero_slice_loop
  (a : Slice U8) (i : Usize) (len : Usize) : Result (Slice U8) :=
  if i < len
  then
    do
    let (_, index_mut_back) ← Slice.index_mut_usize a i
    let i1 ← i + 1#usize
    let a1 := index_mut_back 0#u8
    zero_slice_loop a1 i1 len
  else Result.ok a

/- [arrays::zero_slice]:
   Source: 'tests/src/arrays.rs', lines 314:0-321:1 -/
def zero_slice (a : Slice U8) : Result (Slice U8) :=
  let len := Slice.len a
  zero_slice_loop a 0#usize len

/- [arrays::iter_mut_slice]: loop 0:
   Source: 'tests/src/arrays.rs', lines 326:4-328:5 -/
divergent def iter_mut_slice_loop (len : Usize) (i : Usize) : Result Unit :=
  if i < len
  then do
       let i1 ← i + 1#usize
       iter_mut_slice_loop len i1
  else Result.ok ()

/- [arrays::iter_mut_slice]:
   Source: 'tests/src/arrays.rs', lines 323:0-329:1 -/
def iter_mut_slice (a : Slice U8) : Result (Slice U8) :=
  do
  let len := Slice.len a
  iter_mut_slice_loop len 0#usize
  Result.ok a

/- [arrays::sum_mut_slice]: loop 0:
   Source: 'tests/src/arrays.rs', lines 334:4-337:5 -/
divergent def sum_mut_slice_loop
  (a : Slice U32) (i : Usize) (s : U32) : Result U32 :=
  let i1 := Slice.len a
  if i < i1
  then
    do
    let i2 ← Slice.index_usize a i
    let s1 ← s + i2
    let i3 ← i + 1#usize
    sum_mut_slice_loop a i3 s1
  else Result.ok s

/- [arrays::sum_mut_slice]:
   Source: 'tests/src/arrays.rs', lines 331:0-339:1 -/
def sum_mut_slice (a : Slice U32) : Result (U32 × (Slice U32)) :=
  do
  let i ← sum_mut_slice_loop a 0#usize 0#u32
  Result.ok (i, a)

end arrays
