-- THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS
-- [demo]
import Base
import Demo
open Primitives
open Result

namespace demo

#check U32.add_spec

@[pspec] -- registers the theorem
theorem mul2_add1_spec (x : U32) (h : 2 * ↑x + 1 ≤ U32.max)
  : ∃ y, mul2_add1 x = ret y ∧
  ↑y = 2 * ↑x + (1 : Int)
  := by
  rw [mul2_add1]
  progress as ⟨ i ⟩
  progress as ⟨ i' ⟩
  scalar_tac

@[pspec]
theorem use_mul2_add1_spec (x : U32) (y : U32) (h : 2 * ↑x + 1 + ↑y ≤ U32.max) :
  ∃ z, use_mul2_add1 x y = ret z ∧
  ↑z = 2 * ↑x + (1 : Int) + ↑y := by
  rw [use_mul2_add1]
  progress as ⟨ i ⟩
  progress as ⟨ i' ⟩
  scalar_tac

open CList

@[simp] def CList.to_list {α : Type} (x : CList α) : List α :=
  match x with
  | CNil => []
  | CCons hd tl => hd :: tl.to_list

theorem list_nth_spec {T : Type} [Inhabited T] (l : CList T) (i : U32)
  -- Precondition: the index is in bounds
  (h : ↑i < l.to_list.len)
  -- Postcondition
  : ∃ x, list_nth T l i = ret x ∧
  -- [x] is the ith element of [l] after conversion to [List]
  x = l.to_list.index ↑i
  := by
  rw [list_nth]
  match l with
  | CNil =>
    scalar_tac
  | CCons hd tl =>
    simp only []
    if hi: i = 0#u32 then
      simp [hi]
    else
      simp [hi]
      progress as ⟨ i1 ⟩
      progress as ⟨ l1 ⟩
      have : i.val ≠ 0 := by scalar_tac
      simp_all

end demo
