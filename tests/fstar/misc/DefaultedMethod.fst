(** THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS *)
(** [defaulted_method] *)
module DefaultedMethod
open Primitives

#set-options "--z3rlimit 50 --fuel 1 --ifuel 1"

(** [core::cmp::impls::{core::cmp::Ord for i32}#77::min]:
    Source: '/rustc/library/core/src/cmp.rs', lines 1001:4-1003:20
    Name pattern: [core::cmp::impls::{core::cmp::Ord<i32>}::min] *)
assume val core_cmp_impls_OrdI32_min : i32 -> i32 -> result i32

(** [defaulted_method::main]:
    Source: 'tests/src/defaulted_method.rs', lines 2:0-5:1 *)
let main : result unit =
  let* n = core_cmp_impls_OrdI32_min 10 1 in
  if n = 1 then Ok () else Fail Failure

(** Trait declaration: [core::cmp::PartialEq]
    Source: '/rustc/library/core/src/cmp.rs', lines 248:0-248:39
    Name pattern: [core::cmp::PartialEq] *)
noeq type core_cmp_PartialEq_t (self : Type0) (rhs : Type0) = {
  eq : self -> rhs -> result bool;
}

(** Trait declaration: [core::cmp::Eq]
    Source: '/rustc/library/core/src/cmp.rs', lines 334:0-334:29
    Name pattern: [core::cmp::Eq] *)
noeq type core_cmp_Eq_t (self : Type0) = {
  partialEqInst : core_cmp_PartialEq_t self self;
}

(** [core::cmp::Ordering]
    Source: '/rustc/library/core/src/cmp.rs', lines 387:0-387:17
    Name pattern: [core::cmp::Ordering] *)
type core_cmp_Ordering_t =
| Core_cmp_Ordering_Less : core_cmp_Ordering_t
| Core_cmp_Ordering_Equal : core_cmp_Ordering_t
| Core_cmp_Ordering_Greater : core_cmp_Ordering_t

(** Trait declaration: [core::cmp::PartialOrd]
    Source: '/rustc/library/core/src/cmp.rs', lines 1293:0-1293:56
    Name pattern: [core::cmp::PartialOrd] *)
noeq type core_cmp_PartialOrd_t (self : Type0) (rhs : Type0) = {
  partialEqInst : core_cmp_PartialEq_t self rhs;
  partial_cmp : self -> rhs -> result (option core_cmp_Ordering_t);
}

(** Trait declaration: [core::cmp::Ord]
    Source: '/rustc/library/core/src/cmp.rs', lines 946:0-946:36
    Name pattern: [core::cmp::Ord] *)
noeq type core_cmp_Ord_t (self : Type0) = {
  eqInst : core_cmp_Eq_t self;
  partialOrdInst : core_cmp_PartialOrd_t self self;
  cmp : self -> self -> result core_cmp_Ordering_t;
  min : self -> self -> result self;
}

(** [core::cmp::Ord::min]:
    Source: '/rustc/library/core/src/cmp.rs', lines 1001:4-1003:20
    Name pattern: [core::cmp::Ord::min] *)
assume val core_cmp_Ord_min_default
  (#self : Type0) (self_clause : core_cmp_Ord_t self) :
  self -> self -> result self

(** [core::cmp::impls::{core::cmp::PartialEq<i32> for i32}#30::eq]:
    Source: '/rustc/library/core/src/cmp.rs', lines 1636:16-1636:48
    Name pattern: [core::cmp::impls::{core::cmp::PartialEq<i32, i32>}::eq] *)
assume val core_cmp_impls_PartialEqI32I32_eq : i32 -> i32 -> result bool

(** [core::cmp::impls::{core::cmp::PartialOrd<i32> for i32}#76::partial_cmp]:
    Source: '/rustc/library/core/src/cmp.rs', lines 1716:16-1716:69
    Name pattern: [core::cmp::impls::{core::cmp::PartialOrd<i32, i32>}::partial_cmp] *)
assume val core_cmp_impls_PartialOrdI32I32_partial_cmp
  : i32 -> i32 -> result (option core_cmp_Ordering_t)

(** [core::cmp::impls::{core::cmp::Ord for i32}#77::cmp]:
    Source: '/rustc/library/core/src/cmp.rs', lines 1732:16-1732:53
    Name pattern: [core::cmp::impls::{core::cmp::Ord<i32>}::cmp] *)
assume val core_cmp_impls_OrdI32_cmp : i32 -> i32 -> result core_cmp_Ordering_t

