(** THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS *)
(** [defaulted_method] *)
module DefaultedMethod
open Primitives

#set-options "--z3rlimit 50 --fuel 1 --ifuel 1"

(** Trait declaration: [core::cmp::PartialEq]
    Source: '/rustc/library/core/src/cmp.rs', lines 249:0-249:39
    Name pattern: [core::cmp::PartialEq] *)
noeq type core_cmp_PartialEq_t (self : Type0) (rhs : Type0) = {
  eq : self -> rhs -> result bool;
}

(** Trait declaration: [core::cmp::Eq]
    Source: '/rustc/library/core/src/cmp.rs', lines 335:0-335:29
    Name pattern: [core::cmp::Eq] *)
noeq type core_cmp_Eq_t (self : Type0) = {
  partialEqInst : core_cmp_PartialEq_t self self;
}

(** [core::cmp::Ordering]
    Source: '/rustc/library/core/src/cmp.rs', lines 388:0-388:17
    Name pattern: [core::cmp::Ordering] *)
type core_cmp_Ordering_t =
| Core_cmp_Ordering_Less : core_cmp_Ordering_t
| Core_cmp_Ordering_Equal : core_cmp_Ordering_t
| Core_cmp_Ordering_Greater : core_cmp_Ordering_t

(** Trait declaration: [core::cmp::PartialOrd]
    Source: '/rustc/library/core/src/cmp.rs', lines 1340:0-1340:56
    Name pattern: [core::cmp::PartialOrd] *)
noeq type core_cmp_PartialOrd_t (self : Type0) (rhs : Type0) = {
  partialEqInst : core_cmp_PartialEq_t self rhs;
  partial_cmp : self -> rhs -> result (option core_cmp_Ordering_t);
}

(** Trait declaration: [core::cmp::Ord]
    Source: '/rustc/library/core/src/cmp.rs', lines 957:0-957:36
    Name pattern: [core::cmp::Ord] *)
noeq type core_cmp_Ord_t (self : Type0) = {
  eqInst : core_cmp_Eq_t self;
  partialOrdInst : core_cmp_PartialOrd_t self self;
  cmp : self -> self -> result core_cmp_Ordering_t;
  min : self -> self -> result self;
}

(** [core::cmp::Ord::min]:
    Source: '/rustc/library/core/src/cmp.rs', lines 1048:4-1050:20
    Name pattern: [core::cmp::Ord::min] *)
assume val core_cmp_Ord_min_default
  (#self : Type0) (ordInst : core_cmp_Ord_t self) : self -> self -> result self

(** [core::cmp::impls::{core::cmp::PartialEq<i32> for i32}::eq]:
    Source: '/rustc/library/core/src/cmp.rs', lines 1813:16-1813:50
    Name pattern: [core::cmp::impls::{core::cmp::PartialEq<i32, i32>}::eq] *)
assume val core_cmp_impls_PartialEqI32I32_eq : i32 -> i32 -> result bool

(** [core::cmp::impls::{core::cmp::PartialOrd<i32> for i32}::partial_cmp]:
    Source: '/rustc/library/core/src/cmp.rs', lines 1928:16-1928:71
    Name pattern: [core::cmp::impls::{core::cmp::PartialOrd<i32, i32>}::partial_cmp] *)
assume val core_cmp_impls_PartialOrdI32I32_partial_cmp
  : i32 -> i32 -> result (option core_cmp_Ordering_t)

(** [core::cmp::impls::{core::cmp::Ord for i32}::cmp]:
    Source: '/rustc/library/core/src/cmp.rs', lines 1938:16-1938:55
    Name pattern: [core::cmp::impls::{core::cmp::Ord<i32>}::cmp] *)
assume val core_cmp_impls_OrdI32_cmp : i32 -> i32 -> result core_cmp_Ordering_t

(** [core::cmp::impls::{core::cmp::Ord for i32}::min]:
    Source: '/rustc/library/core/src/cmp.rs', lines 1936:12-1936:27
    Name pattern: [core::cmp::impls::{core::cmp::Ord<i32>}::min] *)
assume val core_cmp_impls_OrdI32_min : i32 -> i32 -> result i32

(** Trait declaration: [defaulted_method::Trait]
    Source: 'tests/src/defaulted_method.rs', lines 2:0-7:1 *)
noeq type trait_t (self : Type0) = {
  provided_method : self -> result u32;
  required_method : self -> result u32;
}

(** [defaulted_method::Trait::provided_method]:
    Source: 'tests/src/defaulted_method.rs', lines 3:4-5:5 *)
let trait_provided_method_default
  (#self : Type0) (traitInst : trait_t self) (self1 : self) : result u32 =
  traitInst.required_method self1

(** [defaulted_method::NoOverride]
    Source: 'tests/src/defaulted_method.rs', lines 9:0-9:18 *)
type noOverride_t = unit

(** [defaulted_method::{defaulted_method::Trait for defaulted_method::NoOverride}::provided_method]:
    Source: 'tests/src/defaulted_method.rs', lines 11:4-13:5 *)
let traitdefaulted_methodNoOverride_provided_method
  (self : noOverride_t) : result u32 =
  Ok 73

(** [defaulted_method::{defaulted_method::Trait for defaulted_method::NoOverride}::required_method]:
    Source: 'tests/src/defaulted_method.rs', lines 14:4-16:5 *)
let traitdefaulted_methodNoOverride_required_method
  (self : noOverride_t) : result u32 =
  Ok 12

(** Trait implementation: [defaulted_method::{defaulted_method::Trait for defaulted_method::NoOverride}]
    Source: 'tests/src/defaulted_method.rs', lines 10:0-17:1 *)
let traitdefaulted_methodNoOverride : trait_t noOverride_t = {
  provided_method = traitdefaulted_methodNoOverride_provided_method;
  required_method = traitdefaulted_methodNoOverride_required_method;
}

(** [defaulted_method::YesOverride]
    Source: 'tests/src/defaulted_method.rs', lines 19:0-19:19 *)
type yesOverride_t = unit

(** [defaulted_method::{defaulted_method::Trait for defaulted_method::YesOverride}::required_method]:
    Source: 'tests/src/defaulted_method.rs', lines 21:4-23:5 *)
let traitdefaulted_methodYesOverride_required_method
  (self : yesOverride_t) : result u32 =
  Ok 42

(** [defaulted_method::{defaulted_method::Trait for defaulted_method::YesOverride}::provided_method]:
    Source: 'tests/src/defaulted_method.rs', lines 20:0-24:1 *)
let traitdefaulted_methodYesOverride_provided_method
  (self : yesOverride_t) : result u32 =
  traitdefaulted_methodYesOverride_required_method self

(** Trait implementation: [defaulted_method::{defaulted_method::Trait for defaulted_method::YesOverride}]
    Source: 'tests/src/defaulted_method.rs', lines 20:0-24:1 *)
let traitdefaulted_methodYesOverride : trait_t yesOverride_t = {
  provided_method = traitdefaulted_methodYesOverride_provided_method;
  required_method = traitdefaulted_methodYesOverride_required_method;
}

(** [defaulted_method::main]:
    Source: 'tests/src/defaulted_method.rs', lines 26:0-33:1 *)
let main : result unit =
  let* _ = traitdefaulted_methodNoOverride_provided_method () in
  let* _ = traitdefaulted_methodYesOverride_provided_method () in
  let* n = core_cmp_impls_OrdI32_min 10 1 in
  if n = 1 then Ok () else Fail Failure

