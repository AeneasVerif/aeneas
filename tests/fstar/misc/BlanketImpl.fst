(** THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS *)
(** [blanket_impl] *)
module BlanketImpl
open Primitives

#set-options "--z3rlimit 50 --fuel 1 --ifuel 1"

(** Trait declaration: [core::iter::traits::iterator::Iterator]
    Source: '/rustc/library/core/src/iter/traits/iterator.rs', lines 39:0-39:18
    Name pattern: core::iter::traits::iterator::Iterator *)
noeq type core_iter_traits_iterator_Iterator_t (self : Type0) (self_item :
  Type0) = {
  next : self -> result ((option self_item) & self);
}

(** [core::iter::traits::collect::{core::iter::traits::collect::IntoIterator<Clause1_Item, I> for I}#1::into_iter]:
    Source: '/rustc/library/core/src/iter/traits/collect.rs', lines 356:4-356:27
    Name pattern: core::iter::traits::collect::{core::iter::traits::collect::IntoIterator<@I, @Clause1_Item, @I>}::into_iter *)
assume val core_iter_traits_collect_IntoIterator_into_iter
  (#i : Type0) (#clause1_item : Type0) (iteratorIteratorInst :
  core_iter_traits_iterator_Iterator_t i clause1_item) :
  i -> result i

(** Trait declaration: [core::cmp::PartialEq]
    Source: '/rustc/library/core/src/cmp.rs', lines 248:0-248:39
    Name pattern: core::cmp::PartialEq *)
noeq type core_cmp_PartialEq_t (self : Type0) (rhs : Type0) = {
  eq : self -> rhs -> result bool;
}

(** [core::cmp::Ordering]
    Source: '/rustc/library/core/src/cmp.rs', lines 387:0-387:17
    Name pattern: core::cmp::Ordering *)
type core_cmp_Ordering_t =
| Core_cmp_Ordering_Less : core_cmp_Ordering_t
| Core_cmp_Ordering_Equal : core_cmp_Ordering_t
| Core_cmp_Ordering_Greater : core_cmp_Ordering_t

(** Trait declaration: [core::cmp::PartialOrd]
    Source: '/rustc/library/core/src/cmp.rs', lines 1293:0-1293:56
    Name pattern: core::cmp::PartialOrd *)
noeq type core_cmp_PartialOrd_t (self : Type0) (rhs : Type0) = {
  partialEqInst : core_cmp_PartialEq_t self rhs;
  partial_cmp : self -> rhs -> result (option core_cmp_Ordering_t);
}

(** Trait declaration: [core::iter::range::Step]
    Source: '/rustc/library/core/src/iter/range.rs', lines 24:0-24:42
    Name pattern: core::iter::range::Step *)
noeq type core_iter_range_Step_t (self : Type0) = {
  cloneCloneInst : core_clone_Clone self;
  cmpPartialOrdInst : core_cmp_PartialOrd_t self self;
  steps_between : self -> self -> result (option usize);
  forward_checked : self -> usize -> result (option self);
  backward_checked : self -> usize -> result (option self);
}

(** [core::iter::range::{core::iter::traits::iterator::Iterator<A> for core::ops::range::Range<A>}#6::next]:
    Source: '/rustc/library/core/src/iter/range.rs', lines 842:4-842:35
    Name pattern: core::iter::range::{core::iter::traits::iterator::Iterator<core::ops::range::Range<@A>, @A>}::next *)
assume val core_iter_range_IteratorcoreopsrangeRangeA_next
  (#a : Type0) (stepInst : core_iter_range_Step_t a) :
  core_ops_range_Range a -> result ((option a) & (core_ops_range_Range a))

(** Trait implementation: [core::iter::range::{core::iter::traits::iterator::Iterator<A> for core::ops::range::Range<A>}#6]
    Source: '/rustc/library/core/src/iter/range.rs', lines 838:0-838:40
    Name pattern: core::iter::traits::iterator::Iterator<core::ops::range::Range<@A>, @A> *)
let core_iter_traits_iterator_IteratorcoreopsrangeRangeA (#a : Type0) (stepInst
  : core_iter_range_Step_t a) : core_iter_traits_iterator_Iterator_t
  (core_ops_range_Range a) a = {
  next = core_iter_range_IteratorcoreopsrangeRangeA_next stepInst;
}

(** [core::cmp::impls::{core::cmp::PartialEq<i32> for i32}#30::eq]:
    Source: '/rustc/library/core/src/cmp.rs', lines 1636:16-1636:48
    Name pattern: core::cmp::impls::{core::cmp::PartialEq<i32, i32>}::eq *)
assume val core_cmp_impls_PartialEqI32I32_eq : i32 -> i32 -> result bool

(** [core::cmp::impls::{core::cmp::PartialOrd<i32> for i32}#76::partial_cmp]:
    Source: '/rustc/library/core/src/cmp.rs', lines 1716:16-1716:69
    Name pattern: core::cmp::impls::{core::cmp::PartialOrd<i32, i32>}::partial_cmp *)
assume val core_cmp_impls_PartialOrdI32I32_partial_cmp
  : i32 -> i32 -> result (option core_cmp_Ordering_t)

(** [core::iter::range::{core::iter::range::Step for i32}#40::steps_between]:
    Source: '/rustc/library/core/src/iter/range.rs', lines 297:16-297:75
    Name pattern: core::iter::range::{core::iter::range::Step<i32>}::steps_between *)
assume val core_iter_range_StepI32_steps_between
  : i32 -> i32 -> result (option usize)

(** [core::iter::range::{core::iter::range::Step for i32}#40::forward_checked]:
    Source: '/rustc/library/core/src/iter/range.rs', lines 311:16-311:73
    Name pattern: core::iter::range::{core::iter::range::Step<i32>}::forward_checked *)
assume val core_iter_range_StepI32_forward_checked
  : i32 -> usize -> result (option i32)

(** [core::iter::range::{core::iter::range::Step for i32}#40::backward_checked]:
    Source: '/rustc/library/core/src/iter/range.rs', lines 332:16-332:74
    Name pattern: core::iter::range::{core::iter::range::Step<i32>}::backward_checked *)
assume val core_iter_range_StepI32_backward_checked
  : i32 -> usize -> result (option i32)

(** Trait implementation: [core::iter::range::{core::iter::range::Step for i32}#40]
    Source: '/rustc/library/core/src/iter/range.rs', lines 292:12-292:37
    Name pattern: core::iter::range::Step<i32> *)
let core_iter_range_StepI32 : core_iter_range_Step_t i32 = {
  cloneCloneInst = core_clone_CloneI32;
  cmpPartialOrdInst = core_cmp_PartialOrdI32;
  steps_between = core_iter_range_StepI32_steps_between;
  forward_checked = core_iter_range_StepI32_forward_checked;
  backward_checked = core_iter_range_StepI32_backward_checked;
}

(** [blanket_impl::main]:
    Source: 'tests/src/blanket_impl.rs', lines 2:0-5:1 *)
let main : result unit =
  let* _ =
    core_iter_traits_collect_IntoIterator_into_iter
      (core_iter_traits_iterator_IteratorcoreopsrangeRangeA
      core_iter_range_StepI32) { start = 0; end_ = 1 } in
  Ok ()

(** Trait declaration: [core::iter::traits::collect::IntoIterator]
    Source: '/rustc/library/core/src/iter/traits/collect.rs', lines 318:0-318:22
    Name pattern: core::iter::traits::collect::IntoIterator *)
noeq type core_iter_traits_collect_IntoIterator_t (self : Type0) (self_item :
  Type0) (self_into_iter : Type0) = {
  iteratorIteratorInst : core_iter_traits_iterator_Iterator_t self_into_iter
    self_item;
  into_iter : self -> result self_into_iter;
}

(** Trait implementation: [core::iter::traits::collect::{core::iter::traits::collect::IntoIterator<Clause1_Item, I> for I}#1]
    Source: '/rustc/library/core/src/iter/traits/collect.rs', lines 351:0-351:36
    Name pattern: core::iter::traits::collect::IntoIterator<@I, @Clause1_Item, @I> *)
let core_iter_traits_collect_IntoIterator_blanket (#i : Type0) (#clause1_item :
  Type0) (iteratorIteratorInst : core_iter_traits_iterator_Iterator_t i
  clause1_item) : core_iter_traits_collect_IntoIterator_t i clause1_item i = {
  iteratorIteratorInst = iteratorIteratorInst;
  into_iter = core_iter_traits_collect_IntoIterator_into_iter
    iteratorIteratorInst;
}

(** Trait declaration: [core::cmp::Eq]
    Source: '/rustc/library/core/src/cmp.rs', lines 334:0-334:29
    Name pattern: core::cmp::Eq *)
noeq type core_cmp_Eq_t (self : Type0) = {
  partialEqInst : core_cmp_PartialEq_t self self;
}

(** Trait declaration: [core::cmp::Ord]
    Source: '/rustc/library/core/src/cmp.rs', lines 946:0-946:36
    Name pattern: core::cmp::Ord *)
noeq type core_cmp_Ord_t (self : Type0) = {
  eqInst : core_cmp_Eq_t self;
  partialOrdInst : core_cmp_PartialOrd_t self self;
  cmp : self -> self -> result core_cmp_Ordering_t;
}

(** Trait declaration: [core::iter::adapters::zip::TrustedRandomAccessNoCoerce]
    Source: '/rustc/library/core/src/iter/adapters/zip.rs', lines 593:0-593:51
    Name pattern: core::iter::adapters::zip::TrustedRandomAccessNoCoerce *)
noeq type core_iter_adapters_zip_TrustedRandomAccessNoCoerce_t (self : Type0)
  = {
  cMAY_HAVE_SIDE_EFFECT : bool;
}

(** Trait declaration: [core::ops::function::FnOnce]
    Source: '/rustc/library/core/src/ops/function.rs', lines 242:0-242:29
    Name pattern: core::ops::function::FnOnce *)
noeq type core_ops_function_FnOnce_t (self : Type0) (args : Type0) (self_output
  : Type0) = {
  call_once : self -> args -> result self_output;
}

(** Trait declaration: [core::ops::function::FnMut]
    Source: '/rustc/library/core/src/ops/function.rs', lines 163:0-163:42
    Name pattern: core::ops::function::FnMut *)
noeq type core_ops_function_FnMut_t (self : Type0) (args : Type0)
  (self_clause0_output : Type0) = {
  fnOnceInst : core_ops_function_FnOnce_t self args self_clause0_output;
  call_mut : self -> args -> result (self_clause0_output & self);
}

(** Trait declaration: [core::iter::traits::collect::FromIterator]
    Source: '/rustc/library/core/src/iter/traits/collect.rs', lines 134:0-134:32
    Name pattern: core::iter::traits::collect::FromIterator *)
noeq type core_iter_traits_collect_FromIterator_t (self : Type0) (a : Type0)
  = {
  from_iter : (#t : Type0) (#clause1_into_iter : Type0) -> (intoIteratorInst :
    core_iter_traits_collect_IntoIterator_t t a clause1_into_iter) -> t ->
    result self;
}

(** Trait declaration: [core::ops::try_trait::FromResidual]
    Source: '/rustc/library/core/src/ops/try_trait.rs', lines 307:0-307:51
    Name pattern: core::ops::try_trait::FromResidual *)
noeq type core_ops_try_trait_FromResidual_t (self : Type0) (r : Type0) = {
  from_residual : r -> result self;
}

(** [core::ops::control_flow::ControlFlow]
    Source: '/rustc/library/core/src/ops/control_flow.rs', lines 85:0-85:31
    Name pattern: core::ops::control_flow::ControlFlow *)
type core_ops_control_flow_ControlFlow_t (b : Type0) (c : Type0) =
| Core_ops_control_flow_ControlFlow_Continue :
  c ->
  core_ops_control_flow_ControlFlow_t b c
| Core_ops_control_flow_ControlFlow_Break :
  b ->
  core_ops_control_flow_ControlFlow_t b c

(** Trait declaration: [core::ops::try_trait::Try]
    Source: '/rustc/library/core/src/ops/try_trait.rs', lines 131:0-131:27
    Name pattern: core::ops::try_trait::Try *)
noeq type core_ops_try_trait_Try_t (self : Type0) (self_output : Type0)
  (self_residual : Type0) = {
  fromResidualInst : core_ops_try_trait_FromResidual_t self self_residual;
  from_output : self_output -> result self;
  branch : self -> result (core_ops_control_flow_ControlFlow_t self_residual
    self_output);
}

(** Trait declaration: [core::ops::try_trait::Residual]
    Source: '/rustc/library/core/src/ops/try_trait.rs', lines 359:0-359:21
    Name pattern: core::ops::try_trait::Residual *)
noeq type core_ops_try_trait_Residual_t (self : Type0) (o : Type0)
  (self_try_type : Type0) = {
  tryInst : core_ops_try_trait_Try_t self_try_type o self;
}

(** Trait declaration: [core::iter::traits::collect::Extend]
    Source: '/rustc/library/core/src/iter/traits/collect.rs', lines 431:0-431:19
    Name pattern: core::iter::traits::collect::Extend *)
noeq type core_iter_traits_collect_Extend_t (self : Type0) (a : Type0) = {
  extend : (#t : Type0) (#clause1_into_iter : Type0) -> (intoIteratorInst :
    core_iter_traits_collect_IntoIterator_t t a clause1_into_iter) -> self -> t
    -> result self;
}

(** Trait declaration: [core::default::Default]
    Source: '/rustc/library/core/src/default.rs', lines 107:0-107:24
    Name pattern: core::default::Default *)
noeq type core_default_Default_t (self : Type0) = { default : result self; }

(** Trait declaration: [core::iter::traits::double_ended::DoubleEndedIterator]
    Source: '/rustc/library/core/src/iter/traits/double_ended.rs', lines 41:0-41:39
    Name pattern: core::iter::traits::double_ended::DoubleEndedIterator *)
noeq type core_iter_traits_double_ended_DoubleEndedIterator_t (self : Type0)
  (self_clause0_item : Type0) = {
  iteratorIteratorInst : core_iter_traits_iterator_Iterator_t self
    self_clause0_item;
  next_back : self -> result ((option self_clause0_item) & self);
}

(** Trait declaration: [core::iter::traits::exact_size::ExactSizeIterator]
    Source: '/rustc/library/core/src/iter/traits/exact_size.rs', lines 86:0-86:37
    Name pattern: core::iter::traits::exact_size::ExactSizeIterator *)
noeq type core_iter_traits_exact_size_ExactSizeIterator_t (self : Type0)
  (self_clause0_item : Type0) = {
  iteratorIteratorInst : core_iter_traits_iterator_Iterator_t self
    self_clause0_item;
}

(** Trait declaration: [core::iter::traits::accum::Sum]
    Source: '/rustc/library/core/src/iter/traits/accum.rs', lines 17:0-17:30
    Name pattern: core::iter::traits::accum::Sum *)
noeq type core_iter_traits_accum_Sum_t (self : Type0) (a : Type0) = {
  sum : (#i : Type0) -> (iteratorIteratorInst :
    core_iter_traits_iterator_Iterator_t i a) -> i -> result self;
}

(** Trait declaration: [core::iter::traits::accum::Product]
    Source: '/rustc/library/core/src/iter/traits/accum.rs', lines 38:0-38:34
    Name pattern: core::iter::traits::accum::Product *)
noeq type core_iter_traits_accum_Product_t (self : Type0) (a : Type0) = {
  product : (#i : Type0) -> (iteratorIteratorInst :
    core_iter_traits_iterator_Iterator_t i a) -> i -> result self;
}

