(** THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS *)
(** [external]: function definitions *)
module External.Funs
open Primitives
include External.Types
include External.Opaque

#set-options "--z3rlimit 50 --fuel 1 --ifuel 1"

(** [external::swap]: forward function *)
let swap_fwd (t : Type0) (x : t) (y : t) (st : state) : result (state & unit) =
  let* (st0, _) = core_mem_swap_fwd t x y st in
  let* (st1, _) = core_mem_swap_back0 t x y st st0 in
  let* (st2, _) = core_mem_swap_back1 t x y st st1 in
  Return (st2, ())

(** [external::swap]: backward function 0 *)
let swap_back
  (t : Type0) (x : t) (y : t) (st : state) (st0 : state) :
  result (state & (t & t))
  =
  let* (st1, _) = core_mem_swap_fwd t x y st in
  let* (st2, x0) = core_mem_swap_back0 t x y st st1 in
  let* (_, y0) = core_mem_swap_back1 t x y st st2 in
  Return (st0, (x0, y0))

(** [external::test_new_non_zero_u32]: forward function *)
let test_new_non_zero_u32_fwd
  (x : u32) (st : state) : result (state & core_num_nonzero_non_zero_u32_t) =
  let* (st0, opt) = core_num_nonzero_non_zero_u32_new_fwd x st in
  core_option_option_unwrap_fwd core_num_nonzero_non_zero_u32_t opt st0

(** [external::test_vec]: forward function *)
let test_vec_fwd : result unit =
  let v = vec_new u32 in let* _ = vec_push_back u32 v 0 in Return ()

(** Unit test for [external::test_vec] *)
let _ = assert_norm (test_vec_fwd = Return ())

(** [external::custom_swap]: forward function *)
let custom_swap_fwd
  (t : Type0) (x : t) (y : t) (st : state) : result (state & t) =
  let* (st0, _) = core_mem_swap_fwd t x y st in
  let* (st1, x0) = core_mem_swap_back0 t x y st st0 in
  let* (st2, _) = core_mem_swap_back1 t x y st st1 in
  Return (st2, x0)

(** [external::custom_swap]: backward function 0 *)
let custom_swap_back
  (t : Type0) (x : t) (y : t) (st : state) (ret : t) (st0 : state) :
  result (state & (t & t))
  =
  let* (st1, _) = core_mem_swap_fwd t x y st in
  let* (st2, _) = core_mem_swap_back0 t x y st st1 in
  let* (_, y0) = core_mem_swap_back1 t x y st st2 in
  Return (st0, (ret, y0))

(** [external::test_custom_swap]: forward function *)
let test_custom_swap_fwd
  (x : u32) (y : u32) (st : state) : result (state & unit) =
  let* (st0, _) = custom_swap_fwd u32 x y st in Return (st0, ())

(** [external::test_custom_swap]: backward function 0 *)
let test_custom_swap_back
  (x : u32) (y : u32) (st : state) (st0 : state) :
  result (state & (u32 & u32))
  =
  custom_swap_back u32 x y st 1 st0

(** [external::test_swap_non_zero]: forward function *)
let test_swap_non_zero_fwd (x : u32) (st : state) : result (state & u32) =
  let* (st0, _) = swap_fwd u32 x 0 st in
  let* (st1, (x0, _)) = swap_back u32 x 0 st st0 in
  if x0 = 0 then Fail Failure else Return (st1, x0)

