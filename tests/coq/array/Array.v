(** THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS *)
(** [array] *)
Require Import Primitives.
Import Primitives.
Require Import Coq.ZArith.ZArith.
Require Import List.
Import ListNotations.
Local Open Scope Primitives_scope.
Module Array.

(** [array::AB]
    Source: 'src/array.rs', lines 3:0-3:11 *)
Inductive AB_t := | AB_A : AB_t | AB_B : AB_t.

(** [array::incr]:
    Source: 'src/array.rs', lines 8:0-8:24 *)
Definition incr (x : u32) : result u32 :=
  u32_add x 1%u32.

(** [array::array_to_shared_slice_]:
    Source: 'src/array.rs', lines 16:0-16:53 *)
Definition array_to_shared_slice_
  (T : Type) (s : array T 32%usize) : result (slice T) :=
  array_to_slice T 32%usize s
.

(** [array::array_to_mut_slice_]:
    Source: 'src/array.rs', lines 21:0-21:58 *)
Definition array_to_mut_slice_
  (T : Type) (s : array T 32%usize) :
  result ((slice T) * (slice T -> result (array T 32%usize)))
  :=
  p <- array_to_slice_mut T 32%usize s;
  let (s1, to_slice_mut_back) := p in
  let back := fun (ret : slice T) => to_slice_mut_back ret in
  Return (s1, back)
.

(** [array::array_len]:
    Source: 'src/array.rs', lines 25:0-25:40 *)
Definition array_len (T : Type) (s : array T 32%usize) : result usize :=
  s1 <- array_to_slice T 32%usize s; let i := slice_len T s1 in Return i
.

(** [array::shared_array_len]:
    Source: 'src/array.rs', lines 29:0-29:48 *)
Definition shared_array_len (T : Type) (s : array T 32%usize) : result usize :=
  s1 <- array_to_slice T 32%usize s; let i := slice_len T s1 in Return i
.

(** [array::shared_slice_len]:
    Source: 'src/array.rs', lines 33:0-33:44 *)
Definition shared_slice_len (T : Type) (s : slice T) : result usize :=
  let i := slice_len T s in Return i
.

(** [array::index_array_shared]:
    Source: 'src/array.rs', lines 37:0-37:57 *)
Definition index_array_shared
  (T : Type) (s : array T 32%usize) (i : usize) : result T :=
  array_index_usize T 32%usize s i
.

(** [array::index_array_u32]:
    Source: 'src/array.rs', lines 44:0-44:53 *)
Definition index_array_u32 (s : array u32 32%usize) (i : usize) : result u32 :=
  array_index_usize u32 32%usize s i
.

(** [array::index_array_copy]:
    Source: 'src/array.rs', lines 48:0-48:45 *)
Definition index_array_copy (x : array u32 32%usize) : result u32 :=
  array_index_usize u32 32%usize x 0%usize
.

(** [array::index_mut_array]:
    Source: 'src/array.rs', lines 52:0-52:62 *)
Definition index_mut_array
  (T : Type) (s : array T 32%usize) (i : usize) :
  result (T * (T -> result (array T 32%usize)))
  :=
  p <- array_index_mut_usize T 32%usize s i;
  let (t, index_mut_back) := p in
  let back := fun (ret : T) => index_mut_back ret in
  Return (t, back)
.

(** [array::index_slice]:
    Source: 'src/array.rs', lines 56:0-56:46 *)
Definition index_slice (T : Type) (s : slice T) (i : usize) : result T :=
  slice_index_usize T s i
.

(** [array::index_mut_slice]:
    Source: 'src/array.rs', lines 60:0-60:58 *)
Definition index_mut_slice
  (T : Type) (s : slice T) (i : usize) :
  result (T * (T -> result (slice T)))
  :=
  p <- slice_index_mut_usize T s i;
  let (t, index_mut_back) := p in
  let back := fun (ret : T) => index_mut_back ret in
  Return (t, back)
.

(** [array::slice_subslice_shared_]:
    Source: 'src/array.rs', lines 64:0-64:70 *)
Definition slice_subslice_shared_
  (x : slice u32) (y : usize) (z : usize) : result (slice u32) :=
  core_slice_index_Slice_index u32 (core_ops_range_Range usize)
    (core_slice_index_SliceIndexRangeUsizeSliceTInst u32) x
    {| core_ops_range_Range_start := y; core_ops_range_Range_end_ := z |}
.

(** [array::slice_subslice_mut_]:
    Source: 'src/array.rs', lines 68:0-68:75 *)
Definition slice_subslice_mut_
  (x : slice u32) (y : usize) (z : usize) :
  result ((slice u32) * (slice u32 -> result (slice u32)))
  :=
  p <-
    core_slice_index_Slice_index_mut u32 (core_ops_range_Range usize)
      (core_slice_index_SliceIndexRangeUsizeSliceTInst u32) x
      {| core_ops_range_Range_start := y; core_ops_range_Range_end_ := z |};
  let (s, index_mut_back) := p in
  let back := fun (ret : slice u32) => index_mut_back ret in
  Return (s, back)
.

(** [array::array_to_slice_shared_]:
    Source: 'src/array.rs', lines 72:0-72:54 *)
Definition array_to_slice_shared_
  (x : array u32 32%usize) : result (slice u32) :=
  array_to_slice u32 32%usize x
.

(** [array::array_to_slice_mut_]:
    Source: 'src/array.rs', lines 76:0-76:59 *)
Definition array_to_slice_mut_
  (x : array u32 32%usize) :
  result ((slice u32) * (slice u32 -> result (array u32 32%usize)))
  :=
  p <- array_to_slice_mut u32 32%usize x;
  let (s, to_slice_mut_back) := p in
  let back := fun (ret : slice u32) => to_slice_mut_back ret in
  Return (s, back)
.

(** [array::array_subslice_shared_]:
    Source: 'src/array.rs', lines 80:0-80:74 *)
Definition array_subslice_shared_
  (x : array u32 32%usize) (y : usize) (z : usize) : result (slice u32) :=
  core_array_Array_index u32 (core_ops_range_Range usize) 32%usize
    (core_ops_index_IndexSliceTIInst u32 (core_ops_range_Range usize)
    (core_slice_index_SliceIndexRangeUsizeSliceTInst u32)) x
    {| core_ops_range_Range_start := y; core_ops_range_Range_end_ := z |}
.

(** [array::array_subslice_mut_]:
    Source: 'src/array.rs', lines 84:0-84:79 *)
Definition array_subslice_mut_
  (x : array u32 32%usize) (y : usize) (z : usize) :
  result ((slice u32) * (slice u32 -> result (array u32 32%usize)))
  :=
  p <-
    core_array_Array_index_mut u32 (core_ops_range_Range usize) 32%usize
      (core_ops_index_IndexMutSliceTIInst u32 (core_ops_range_Range usize)
      (core_slice_index_SliceIndexRangeUsizeSliceTInst u32)) x
      {| core_ops_range_Range_start := y; core_ops_range_Range_end_ := z |};
  let (s, index_mut_back) := p in
  let back := fun (ret : slice u32) => index_mut_back ret in
  Return (s, back)
.

(** [array::index_slice_0]:
    Source: 'src/array.rs', lines 88:0-88:38 *)
Definition index_slice_0 (T : Type) (s : slice T) : result T :=
  slice_index_usize T s 0%usize
.

(** [array::index_array_0]:
    Source: 'src/array.rs', lines 92:0-92:42 *)
Definition index_array_0 (T : Type) (s : array T 32%usize) : result T :=
  array_index_usize T 32%usize s 0%usize
.

(** [array::index_index_array]:
    Source: 'src/array.rs', lines 103:0-103:71 *)
Definition index_index_array
  (s : array (array u32 32%usize) 32%usize) (i : usize) (j : usize) :
  result u32
  :=
  a <- array_index_usize (array u32 32%usize) 32%usize s i;
  array_index_usize u32 32%usize a j
.

(** [array::update_update_array]:
    Source: 'src/array.rs', lines 114:0-114:70 *)
Definition update_update_array
  (s : array (array u32 32%usize) 32%usize) (i : usize) (j : usize) :
  result unit
  :=
  p <- array_index_mut_usize (array u32 32%usize) 32%usize s i;
  let (a, index_mut_back) := p in
  p1 <- array_index_mut_usize u32 32%usize a j;
  let (_, index_mut_back1) := p1 in
  a1 <- index_mut_back1 0%u32;
  _ <- index_mut_back a1;
  Return tt
.

(** [array::array_local_deep_copy]:
    Source: 'src/array.rs', lines 118:0-118:43 *)
Definition array_local_deep_copy (x : array u32 32%usize) : result unit :=
  Return tt
.

(** [array::take_array]:
    Source: 'src/array.rs', lines 122:0-122:30 *)
Definition take_array (a : array u32 2%usize) : result unit :=
  Return tt.

(** [array::take_array_borrow]:
    Source: 'src/array.rs', lines 123:0-123:38 *)
Definition take_array_borrow (a : array u32 2%usize) : result unit :=
  Return tt
.

(** [array::take_slice]:
    Source: 'src/array.rs', lines 124:0-124:28 *)
Definition take_slice (s : slice u32) : result unit :=
  Return tt.

(** [array::take_mut_slice]:
    Source: 'src/array.rs', lines 125:0-125:36 *)
Definition take_mut_slice (s : slice u32) : result (slice u32) :=
  Return s.

(** [array::const_array]:
    Source: 'src/array.rs', lines 127:0-127:32 *)
Definition const_array : result (array u32 2%usize) :=
  Return (mk_array u32 2%usize [ 0%u32; 0%u32 ])
.

(** [array::const_slice]:
    Source: 'src/array.rs', lines 131:0-131:20 *)
Definition const_slice : result unit :=
  _ <- array_to_slice u32 2%usize (mk_array u32 2%usize [ 0%u32; 0%u32 ]);
  Return tt
.

(** [array::take_all]:
    Source: 'src/array.rs', lines 141:0-141:17 *)
Definition take_all : result unit :=
  _ <- take_array (mk_array u32 2%usize [ 0%u32; 0%u32 ]);
  _ <- take_array (mk_array u32 2%usize [ 0%u32; 0%u32 ]);
  _ <- take_array_borrow (mk_array u32 2%usize [ 0%u32; 0%u32 ]);
  s <- array_to_slice u32 2%usize (mk_array u32 2%usize [ 0%u32; 0%u32 ]);
  _ <- take_slice s;
  p <- array_to_slice_mut u32 2%usize (mk_array u32 2%usize [ 0%u32; 0%u32 ]);
  let (s1, to_slice_mut_back) := p in
  s2 <- take_mut_slice s1;
  _ <- to_slice_mut_back s2;
  Return tt
.

(** [array::index_array]:
    Source: 'src/array.rs', lines 155:0-155:38 *)
Definition index_array (x : array u32 2%usize) : result u32 :=
  array_index_usize u32 2%usize x 0%usize
.

(** [array::index_array_borrow]:
    Source: 'src/array.rs', lines 158:0-158:46 *)
Definition index_array_borrow (x : array u32 2%usize) : result u32 :=
  array_index_usize u32 2%usize x 0%usize
.

(** [array::index_slice_u32_0]:
    Source: 'src/array.rs', lines 162:0-162:42 *)
Definition index_slice_u32_0 (x : slice u32) : result u32 :=
  slice_index_usize u32 x 0%usize
.

(** [array::index_mut_slice_u32_0]:
    Source: 'src/array.rs', lines 166:0-166:50 *)
Definition index_mut_slice_u32_0
  (x : slice u32) : result (u32 * (slice u32)) :=
  i <- slice_index_usize u32 x 0%usize; Return (i, x)
.

(** [array::index_all]:
    Source: 'src/array.rs', lines 170:0-170:25 *)
Definition index_all : result u32 :=
  i <- index_array (mk_array u32 2%usize [ 0%u32; 0%u32 ]);
  i1 <- index_array (mk_array u32 2%usize [ 0%u32; 0%u32 ]);
  i2 <- u32_add i i1;
  i3 <- index_array_borrow (mk_array u32 2%usize [ 0%u32; 0%u32 ]);
  i4 <- u32_add i2 i3;
  s <- array_to_slice u32 2%usize (mk_array u32 2%usize [ 0%u32; 0%u32 ]);
  i5 <- index_slice_u32_0 s;
  i6 <- u32_add i4 i5;
  p <- array_to_slice_mut u32 2%usize (mk_array u32 2%usize [ 0%u32; 0%u32 ]);
  let (s1, to_slice_mut_back) := p in
  p1 <- index_mut_slice_u32_0 s1;
  let (i7, s2) := p1 in
  i8 <- u32_add i6 i7;
  _ <- to_slice_mut_back s2;
  Return i8
.

(** [array::update_array]:
    Source: 'src/array.rs', lines 184:0-184:36 *)
Definition update_array (x : array u32 2%usize) : result unit :=
  p <- array_index_mut_usize u32 2%usize x 0%usize;
  let (_, index_mut_back) := p in
  _ <- index_mut_back 1%u32;
  Return tt
.

(** [array::update_array_mut_borrow]:
    Source: 'src/array.rs', lines 187:0-187:48 *)
Definition update_array_mut_borrow
  (x : array u32 2%usize) : result (array u32 2%usize) :=
  p <- array_index_mut_usize u32 2%usize x 0%usize;
  let (_, index_mut_back) := p in
  index_mut_back 1%u32
.

(** [array::update_mut_slice]:
    Source: 'src/array.rs', lines 190:0-190:38 *)
Definition update_mut_slice (x : slice u32) : result (slice u32) :=
  p <- slice_index_mut_usize u32 x 0%usize;
  let (_, index_mut_back) := p in
  index_mut_back 1%u32
.

(** [array::update_all]:
    Source: 'src/array.rs', lines 194:0-194:19 *)
Definition update_all : result unit :=
  _ <- update_array (mk_array u32 2%usize [ 0%u32; 0%u32 ]);
  _ <- update_array (mk_array u32 2%usize [ 0%u32; 0%u32 ]);
  a <- update_array_mut_borrow (mk_array u32 2%usize [ 0%u32; 0%u32 ]);
  p <- array_to_slice_mut u32 2%usize a;
  let (s, to_slice_mut_back) := p in
  s1 <- update_mut_slice s;
  _ <- to_slice_mut_back s1;
  Return tt
.

(** [array::range_all]:
    Source: 'src/array.rs', lines 205:0-205:18 *)
Definition range_all : result unit :=
  p <-
    core_array_Array_index_mut u32 (core_ops_range_Range usize) 4%usize
      (core_ops_index_IndexMutSliceTIInst u32 (core_ops_range_Range usize)
      (core_slice_index_SliceIndexRangeUsizeSliceTInst u32))
      (mk_array u32 4%usize [ 0%u32; 0%u32; 0%u32; 0%u32 ])
      {|
        core_ops_range_Range_start := 1%usize;
        core_ops_range_Range_end_ := 3%usize
      |};
  let (s, index_mut_back) := p in
  s1 <- update_mut_slice s;
  _ <- index_mut_back s1;
  Return tt
.

(** [array::deref_array_borrow]:
    Source: 'src/array.rs', lines 214:0-214:46 *)
Definition deref_array_borrow (x : array u32 2%usize) : result u32 :=
  array_index_usize u32 2%usize x 0%usize
.

(** [array::deref_array_mut_borrow]:
    Source: 'src/array.rs', lines 219:0-219:54 *)
Definition deref_array_mut_borrow
  (x : array u32 2%usize) : result (u32 * (array u32 2%usize)) :=
  i <- array_index_usize u32 2%usize x 0%usize; Return (i, x)
.

(** [array::take_array_t]:
    Source: 'src/array.rs', lines 227:0-227:31 *)
Definition take_array_t (a : array AB_t 2%usize) : result unit :=
  Return tt.

(** [array::non_copyable_array]:
    Source: 'src/array.rs', lines 229:0-229:27 *)
Definition non_copyable_array : result unit :=
  _ <- take_array_t (mk_array AB_t 2%usize [ AB_A; AB_B ]); Return tt
.

(** [array::sum]: loop 0:
    Source: 'src/array.rs', lines 242:0-250:1 *)
Fixpoint sum_loop
  (n : nat) (s : slice u32) (sum1 : u32) (i : usize) : result u32 :=
  match n with
  | O => Fail_ OutOfFuel
  | S n1 =>
    let i1 := slice_len u32 s in
    if i s< i1
    then (
      i2 <- slice_index_usize u32 s i;
      sum3 <- u32_add sum1 i2;
      i3 <- usize_add i 1%usize;
      sum_loop n1 s sum3 i3)
    else Return sum1
  end
.

(** [array::sum]:
    Source: 'src/array.rs', lines 242:0-242:28 *)
Definition sum (n : nat) (s : slice u32) : result u32 :=
  sum_loop n s 0%u32 0%usize
.

(** [array::sum2]: loop 0:
    Source: 'src/array.rs', lines 252:0-261:1 *)
Fixpoint sum2_loop
  (n : nat) (s : slice u32) (s2 : slice u32) (sum1 : u32) (i : usize) :
  result u32
  :=
  match n with
  | O => Fail_ OutOfFuel
  | S n1 =>
    let i1 := slice_len u32 s in
    if i s< i1
    then (
      i2 <- slice_index_usize u32 s i;
      i3 <- slice_index_usize u32 s2 i;
      i4 <- u32_add i2 i3;
      sum3 <- u32_add sum1 i4;
      i5 <- usize_add i 1%usize;
      sum2_loop n1 s s2 sum3 i5)
    else Return sum1
  end
.

(** [array::sum2]:
    Source: 'src/array.rs', lines 252:0-252:41 *)
Definition sum2 (n : nat) (s : slice u32) (s2 : slice u32) : result u32 :=
  let i := slice_len u32 s in
  let i1 := slice_len u32 s2 in
  if negb (i s= i1) then Fail_ Failure else sum2_loop n s s2 0%u32 0%usize
.

(** [array::f0]:
    Source: 'src/array.rs', lines 263:0-263:11 *)
Definition f0 : result unit :=
  p <- array_to_slice_mut u32 2%usize (mk_array u32 2%usize [ 1%u32; 2%u32 ]);
  let (s, to_slice_mut_back) := p in
  p1 <- slice_index_mut_usize u32 s 0%usize;
  let (_, index_mut_back) := p1 in
  s1 <- index_mut_back 1%u32;
  _ <- to_slice_mut_back s1;
  Return tt
.

(** [array::f1]:
    Source: 'src/array.rs', lines 268:0-268:11 *)
Definition f1 : result unit :=
  p <-
    array_index_mut_usize u32 2%usize (mk_array u32 2%usize [ 1%u32; 2%u32 ])
      0%usize;
  let (_, index_mut_back) := p in
  _ <- index_mut_back 1%u32;
  Return tt
.

(** [array::f2]:
    Source: 'src/array.rs', lines 273:0-273:17 *)
Definition f2 (i : u32) : result unit :=
  Return tt.

(** [array::f4]:
    Source: 'src/array.rs', lines 282:0-282:54 *)
Definition f4
  (x : array u32 32%usize) (y : usize) (z : usize) : result (slice u32) :=
  core_array_Array_index u32 (core_ops_range_Range usize) 32%usize
    (core_ops_index_IndexSliceTIInst u32 (core_ops_range_Range usize)
    (core_slice_index_SliceIndexRangeUsizeSliceTInst u32)) x
    {| core_ops_range_Range_start := y; core_ops_range_Range_end_ := z |}
.

(** [array::f3]:
    Source: 'src/array.rs', lines 275:0-275:18 *)
Definition f3 (n : nat) : result u32 :=
  i <-
    array_index_usize u32 2%usize (mk_array u32 2%usize [ 1%u32; 2%u32 ])
      0%usize;
  _ <- f2 i;
  let b := array_repeat u32 32%usize 0%u32 in
  s <- array_to_slice u32 2%usize (mk_array u32 2%usize [ 1%u32; 2%u32 ]);
  s1 <- f4 b 16%usize 18%usize;
  sum2 n s s1
.

(** [array::SZ]
    Source: 'src/array.rs', lines 286:0-286:19 *)
Definition sz_body : result usize := Return 32%usize.
Definition sz_c : usize := sz_body%global.

(** [array::f5]:
    Source: 'src/array.rs', lines 289:0-289:31 *)
Definition f5 (x : array u32 32%usize) : result u32 :=
  array_index_usize u32 32%usize x 0%usize
.

(** [array::ite]:
    Source: 'src/array.rs', lines 294:0-294:12 *)
Definition ite : result unit :=
  p <- array_to_slice_mut u32 2%usize (mk_array u32 2%usize [ 0%u32; 0%u32 ]);
  let (s, to_slice_mut_back) := p in
  p1 <- index_mut_slice_u32_0 s;
  let (_, s1) := p1 in
  p2 <- array_to_slice_mut u32 2%usize (mk_array u32 2%usize [ 0%u32; 0%u32 ]);
  let (s2, to_slice_mut_back1) := p2 in
  p3 <- index_mut_slice_u32_0 s2;
  let (_, s3) := p3 in
  _ <- to_slice_mut_back1 s3;
  _ <- to_slice_mut_back s1;
  Return tt
.

End Array.
