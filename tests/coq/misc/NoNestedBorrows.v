(** THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS *)
(** [no_nested_borrows] *)
Require Import Primitives.
Import Primitives.
Require Import Coq.ZArith.ZArith.
Require Import List.
Import ListNotations.
Local Open Scope Primitives_scope.
Module NoNestedBorrows.

(** [no_nested_borrows::Pair] *)
Record Pair_t (T1 T2 : Type) := mkPair_t { pair_x : T1; pair_y : T2; }.

Arguments mkPair_t { _ _ }.
Arguments pair_x { _ _ }.
Arguments pair_y { _ _ }.

(** [no_nested_borrows::List] *)
Inductive List_t (T : Type) :=
| List_Cons : T -> List_t T -> List_t T
| List_Nil : List_t T
.

Arguments List_Cons { _ }.
Arguments List_Nil { _ }.

(** [no_nested_borrows::One] *)
Inductive One_t (T1 : Type) := | One_One : T1 -> One_t T1.

Arguments One_One { _ }.

(** [no_nested_borrows::EmptyEnum] *)
Inductive EmptyEnum_t := | EmptyEnum_Empty : EmptyEnum_t.

(** [no_nested_borrows::Enum] *)
Inductive Enum_t := | Enum_Variant1 : Enum_t | Enum_Variant2 : Enum_t.

(** [no_nested_borrows::EmptyStruct] *)
Record EmptyStruct_t := mkEmptyStruct_t {  }.

(** [no_nested_borrows::Sum] *)
Inductive Sum_t (T1 T2 : Type) :=
| Sum_Left : T1 -> Sum_t T1 T2
| Sum_Right : T2 -> Sum_t T1 T2
.

Arguments Sum_Left { _ _ }.
Arguments Sum_Right { _ _ }.

(** [no_nested_borrows::neg_test]: forward function *)
Definition neg_test (x : i32) : result i32 :=
  i32_neg x.

(** [no_nested_borrows::add_test]: forward function *)
Definition add_test (x : u32) (y : u32) : result u32 :=
  u32_add x y.

(** [no_nested_borrows::subs_test]: forward function *)
Definition subs_test (x : u32) (y : u32) : result u32 :=
  u32_sub x y.

(** [no_nested_borrows::div_test]: forward function *)
Definition div_test (x : u32) (y : u32) : result u32 :=
  u32_div x y.

(** [no_nested_borrows::div_test1]: forward function *)
Definition div_test1 (x : u32) : result u32 :=
  u32_div x 2%u32.

(** [no_nested_borrows::rem_test]: forward function *)
Definition rem_test (x : u32) (y : u32) : result u32 :=
  u32_rem x y.

(** [no_nested_borrows::mul_test]: forward function *)
Definition mul_test (x : u32) (y : u32) : result u32 :=
  u32_mul x y.

(** [no_nested_borrows::CONST0] *)
Definition const0_body : result usize := usize_add 1%usize 1%usize.
Definition const0_c : usize := const0_body%global.

(** [no_nested_borrows::CONST1] *)
Definition const1_body : result usize := usize_mul 2%usize 2%usize.
Definition const1_c : usize := const1_body%global.

(** [no_nested_borrows::cast_test]: forward function *)
Definition cast_test (x : u32) : result i32 :=
  scalar_cast U32 I32 x.

(** [no_nested_borrows::test2]: forward function *)
Definition test2 : result unit :=
  _ <- u32_add 23%u32 44%u32; Return tt.

(** Unit test for [no_nested_borrows::test2] *)
Check (test2 )%return.

(** [no_nested_borrows::get_max]: forward function *)
Definition get_max (x : u32) (y : u32) : result u32 :=
  if x s>= y then Return x else Return y
.

(** [no_nested_borrows::test3]: forward function *)
Definition test3 : result unit :=
  x <- get_max 4%u32 3%u32;
  y <- get_max 10%u32 11%u32;
  z <- u32_add x y;
  if negb (z s= 15%u32) then Fail_ Failure else Return tt
.

(** Unit test for [no_nested_borrows::test3] *)
Check (test3 )%return.

(** [no_nested_borrows::test_neg1]: forward function *)
Definition test_neg1 : result unit :=
  y <- i32_neg 3%i32; if negb (y s= (-3)%i32) then Fail_ Failure else Return tt
.

(** Unit test for [no_nested_borrows::test_neg1] *)
Check (test_neg1 )%return.

(** [no_nested_borrows::refs_test1]: forward function *)
Definition refs_test1 : result unit :=
  if negb (1%i32 s= 1%i32) then Fail_ Failure else Return tt
.

(** Unit test for [no_nested_borrows::refs_test1] *)
Check (refs_test1 )%return.

(** [no_nested_borrows::refs_test2]: forward function *)
Definition refs_test2 : result unit :=
  if negb (2%i32 s= 2%i32)
  then Fail_ Failure
  else
    if negb (0%i32 s= 0%i32)
    then Fail_ Failure
    else
      if negb (2%i32 s= 2%i32)
      then Fail_ Failure
      else if negb (2%i32 s= 2%i32) then Fail_ Failure else Return tt
.

(** Unit test for [no_nested_borrows::refs_test2] *)
Check (refs_test2 )%return.

(** [no_nested_borrows::test_list1]: forward function *)
Definition test_list1 : result unit :=
  Return tt.

(** Unit test for [no_nested_borrows::test_list1] *)
Check (test_list1 )%return.

(** [no_nested_borrows::test_box1]: forward function *)
Definition test_box1 : result unit :=
  let b := 1%i32 in
  let x := b in
  if negb (x s= 1%i32) then Fail_ Failure else Return tt
.

(** Unit test for [no_nested_borrows::test_box1] *)
Check (test_box1 )%return.

(** [no_nested_borrows::copy_int]: forward function *)
Definition copy_int (x : i32) : result i32 :=
  Return x.

(** [no_nested_borrows::test_unreachable]: forward function *)
Definition test_unreachable (b : bool) : result unit :=
  if b then Fail_ Failure else Return tt
.

(** [no_nested_borrows::test_panic]: forward function *)
Definition test_panic (b : bool) : result unit :=
  if b then Fail_ Failure else Return tt
.

(** [no_nested_borrows::test_copy_int]: forward function *)
Definition test_copy_int : result unit :=
  y <- copy_int 0%i32; if negb (0%i32 s= y) then Fail_ Failure else Return tt
.

(** Unit test for [no_nested_borrows::test_copy_int] *)
Check (test_copy_int )%return.

(** [no_nested_borrows::is_cons]: forward function *)
Definition is_cons (T : Type) (l : List_t T) : result bool :=
  match l with | List_Cons t l0 => Return true | List_Nil => Return false end
.

(** [no_nested_borrows::test_is_cons]: forward function *)
Definition test_is_cons : result unit :=
  let l := List_Nil in
  b <- is_cons i32 (List_Cons 0%i32 l);
  if negb b then Fail_ Failure else Return tt
.

(** Unit test for [no_nested_borrows::test_is_cons] *)
Check (test_is_cons )%return.

(** [no_nested_borrows::split_list]: forward function *)
Definition split_list (T : Type) (l : List_t T) : result (T * (List_t T)) :=
  match l with
  | List_Cons hd tl => Return (hd, tl)
  | List_Nil => Fail_ Failure
  end
.

(** [no_nested_borrows::test_split_list]: forward function *)
Definition test_split_list : result unit :=
  let l := List_Nil in
  p <- split_list i32 (List_Cons 0%i32 l);
  let (hd, _) := p in
  if negb (hd s= 0%i32) then Fail_ Failure else Return tt
.

(** Unit test for [no_nested_borrows::test_split_list] *)
Check (test_split_list )%return.

(** [no_nested_borrows::choose]: forward function *)
Definition choose (T : Type) (b : bool) (x : T) (y : T) : result T :=
  if b then Return x else Return y
.

(** [no_nested_borrows::choose]: backward function 0 *)
Definition choose_back
  (T : Type) (b : bool) (x : T) (y : T) (ret : T) : result (T * T) :=
  if b then Return (ret, y) else Return (x, ret)
.

(** [no_nested_borrows::choose_test]: forward function *)
Definition choose_test : result unit :=
  z <- choose i32 true 0%i32 0%i32;
  z0 <- i32_add z 1%i32;
  if negb (z0 s= 1%i32)
  then Fail_ Failure
  else (
    p <- choose_back i32 true 0%i32 0%i32 z0;
    let (x, y) := p in
    if negb (x s= 1%i32)
    then Fail_ Failure
    else if negb (y s= 0%i32) then Fail_ Failure else Return tt)
.

(** Unit test for [no_nested_borrows::choose_test] *)
Check (choose_test )%return.

(** [no_nested_borrows::test_char]: forward function *)
Definition test_char : result char :=
  Return (char_of_byte Coq.Init.Byte.x61).

(** [no_nested_borrows::Tree] *)
Inductive Tree_t (T : Type) :=
| Tree_Leaf : T -> Tree_t T
| Tree_Node : T -> NodeElem_t T -> Tree_t T -> Tree_t T

(** [no_nested_borrows::NodeElem] *)
with NodeElem_t (T : Type) :=
| NodeElem_Cons : Tree_t T -> NodeElem_t T -> NodeElem_t T
| NodeElem_Nil : NodeElem_t T
.

Arguments Tree_Leaf { _ }.
Arguments Tree_Node { _ }.

Arguments NodeElem_Cons { _ }.
Arguments NodeElem_Nil { _ }.

(** [no_nested_borrows::list_length]: forward function *)
Fixpoint list_length (T : Type) (l : List_t T) : result u32 :=
  match l with
  | List_Cons t l1 => i <- list_length T l1; u32_add 1%u32 i
  | List_Nil => Return 0%u32
  end
.

(** [no_nested_borrows::list_nth_shared]: forward function *)
Fixpoint list_nth_shared (T : Type) (l : List_t T) (i : u32) : result T :=
  match l with
  | List_Cons x tl =>
    if i s= 0%u32
    then Return x
    else (i0 <- u32_sub i 1%u32; list_nth_shared T tl i0)
  | List_Nil => Fail_ Failure
  end
.

(** [no_nested_borrows::list_nth_mut]: forward function *)
Fixpoint list_nth_mut (T : Type) (l : List_t T) (i : u32) : result T :=
  match l with
  | List_Cons x tl =>
    if i s= 0%u32
    then Return x
    else (i0 <- u32_sub i 1%u32; list_nth_mut T tl i0)
  | List_Nil => Fail_ Failure
  end
.

(** [no_nested_borrows::list_nth_mut]: backward function 0 *)
Fixpoint list_nth_mut_back
  (T : Type) (l : List_t T) (i : u32) (ret : T) : result (List_t T) :=
  match l with
  | List_Cons x tl =>
    if i s= 0%u32
    then Return (List_Cons ret tl)
    else (
      i0 <- u32_sub i 1%u32;
      tl0 <- list_nth_mut_back T tl i0 ret;
      Return (List_Cons x tl0))
  | List_Nil => Fail_ Failure
  end
.

(** [no_nested_borrows::list_rev_aux]: forward function *)
Fixpoint list_rev_aux
  (T : Type) (li : List_t T) (lo : List_t T) : result (List_t T) :=
  match li with
  | List_Cons hd tl => list_rev_aux T tl (List_Cons hd lo)
  | List_Nil => Return lo
  end
.

(** [no_nested_borrows::list_rev]: merged forward/backward function
    (there is a single backward function, and the forward function returns ()) *)
Definition list_rev (T : Type) (l : List_t T) : result (List_t T) :=
  let li := core_mem_replace (List_t T) l List_Nil in
  list_rev_aux T li List_Nil
.

(** [no_nested_borrows::test_list_functions]: forward function *)
Definition test_list_functions : result unit :=
  let l := List_Nil in
  let l0 := List_Cons 2%i32 l in
  let l1 := List_Cons 1%i32 l0 in
  i <- list_length i32 (List_Cons 0%i32 l1);
  if negb (i s= 3%u32)
  then Fail_ Failure
  else (
    i0 <- list_nth_shared i32 (List_Cons 0%i32 l1) 0%u32;
    if negb (i0 s= 0%i32)
    then Fail_ Failure
    else (
      i1 <- list_nth_shared i32 (List_Cons 0%i32 l1) 1%u32;
      if negb (i1 s= 1%i32)
      then Fail_ Failure
      else (
        i2 <- list_nth_shared i32 (List_Cons 0%i32 l1) 2%u32;
        if negb (i2 s= 2%i32)
        then Fail_ Failure
        else (
          ls <- list_nth_mut_back i32 (List_Cons 0%i32 l1) 1%u32 3%i32;
          i3 <- list_nth_shared i32 ls 0%u32;
          if negb (i3 s= 0%i32)
          then Fail_ Failure
          else (
            i4 <- list_nth_shared i32 ls 1%u32;
            if negb (i4 s= 3%i32)
            then Fail_ Failure
            else (
              i5 <- list_nth_shared i32 ls 2%u32;
              if negb (i5 s= 2%i32) then Fail_ Failure else Return tt))))))
.

(** Unit test for [no_nested_borrows::test_list_functions] *)
Check (test_list_functions )%return.

(** [no_nested_borrows::id_mut_pair1]: forward function *)
Definition id_mut_pair1 (T1 T2 : Type) (x : T1) (y : T2) : result (T1 * T2) :=
  Return (x, y)
.

(** [no_nested_borrows::id_mut_pair1]: backward function 0 *)
Definition id_mut_pair1_back
  (T1 T2 : Type) (x : T1) (y : T2) (ret : (T1 * T2)) : result (T1 * T2) :=
  let (t, t0) := ret in Return (t, t0)
.

(** [no_nested_borrows::id_mut_pair2]: forward function *)
Definition id_mut_pair2 (T1 T2 : Type) (p : (T1 * T2)) : result (T1 * T2) :=
  let (t, t0) := p in Return (t, t0)
.

(** [no_nested_borrows::id_mut_pair2]: backward function 0 *)
Definition id_mut_pair2_back
  (T1 T2 : Type) (p : (T1 * T2)) (ret : (T1 * T2)) : result (T1 * T2) :=
  let (t, t0) := ret in Return (t, t0)
.

(** [no_nested_borrows::id_mut_pair3]: forward function *)
Definition id_mut_pair3 (T1 T2 : Type) (x : T1) (y : T2) : result (T1 * T2) :=
  Return (x, y)
.

(** [no_nested_borrows::id_mut_pair3]: backward function 0 *)
Definition id_mut_pair3_back'a
  (T1 T2 : Type) (x : T1) (y : T2) (ret : T1) : result T1 :=
  Return ret
.

(** [no_nested_borrows::id_mut_pair3]: backward function 1 *)
Definition id_mut_pair3_back'b
  (T1 T2 : Type) (x : T1) (y : T2) (ret : T2) : result T2 :=
  Return ret
.

(** [no_nested_borrows::id_mut_pair4]: forward function *)
Definition id_mut_pair4 (T1 T2 : Type) (p : (T1 * T2)) : result (T1 * T2) :=
  let (t, t0) := p in Return (t, t0)
.

(** [no_nested_borrows::id_mut_pair4]: backward function 0 *)
Definition id_mut_pair4_back'a
  (T1 T2 : Type) (p : (T1 * T2)) (ret : T1) : result T1 :=
  Return ret
.

(** [no_nested_borrows::id_mut_pair4]: backward function 1 *)
Definition id_mut_pair4_back'b
  (T1 T2 : Type) (p : (T1 * T2)) (ret : T2) : result T2 :=
  Return ret
.

(** [no_nested_borrows::StructWithTuple] *)
Record StructWithTuple_t (T1 T2 : Type) :=
mkStructWithTuple_t {
  structWithTuple_p : (T1 * T2);
}
.

Arguments mkStructWithTuple_t { _ _ }.
Arguments structWithTuple_p { _ _ }.

(** [no_nested_borrows::new_tuple1]: forward function *)
Definition new_tuple1 : result (StructWithTuple_t u32 u32) :=
  Return {| structWithTuple_p := (1%u32, 2%u32) |}
.

(** [no_nested_borrows::new_tuple2]: forward function *)
Definition new_tuple2 : result (StructWithTuple_t i16 i16) :=
  Return {| structWithTuple_p := (1%i16, 2%i16) |}
.

(** [no_nested_borrows::new_tuple3]: forward function *)
Definition new_tuple3 : result (StructWithTuple_t u64 i64) :=
  Return {| structWithTuple_p := (1%u64, 2%i64) |}
.

(** [no_nested_borrows::StructWithPair] *)
Record StructWithPair_t (T1 T2 : Type) :=
mkStructWithPair_t {
  structWithPair_p : Pair_t T1 T2;
}
.

Arguments mkStructWithPair_t { _ _ }.
Arguments structWithPair_p { _ _ }.

(** [no_nested_borrows::new_pair1]: forward function *)
Definition new_pair1 : result (StructWithPair_t u32 u32) :=
  Return {| structWithPair_p := {| pair_x := 1%u32; pair_y := 2%u32 |} |}
.

(** [no_nested_borrows::test_constants]: forward function *)
Definition test_constants : result unit :=
  swt <- new_tuple1;
  let (i, _) := swt.(structWithTuple_p) in
  if negb (i s= 1%u32)
  then Fail_ Failure
  else (
    swt0 <- new_tuple2;
    let (i0, _) := swt0.(structWithTuple_p) in
    if negb (i0 s= 1%i16)
    then Fail_ Failure
    else (
      swt1 <- new_tuple3;
      let (i1, _) := swt1.(structWithTuple_p) in
      if negb (i1 s= 1%u64)
      then Fail_ Failure
      else (
        swp <- new_pair1;
        if negb (swp.(structWithPair_p).(pair_x) s= 1%u32)
        then Fail_ Failure
        else Return tt)))
.

(** Unit test for [no_nested_borrows::test_constants] *)
Check (test_constants )%return.

(** [no_nested_borrows::test_weird_borrows1]: forward function *)
Definition test_weird_borrows1 : result unit :=
  Return tt.

(** Unit test for [no_nested_borrows::test_weird_borrows1] *)
Check (test_weird_borrows1 )%return.

(** [no_nested_borrows::test_mem_replace]: merged forward/backward function
    (there is a single backward function, and the forward function returns ()) *)
Definition test_mem_replace (px : u32) : result u32 :=
  let y := core_mem_replace u32 px 1%u32 in
  if negb (y s= 0%u32) then Fail_ Failure else Return 2%u32
.

(** [no_nested_borrows::test_shared_borrow_bool1]: forward function *)
Definition test_shared_borrow_bool1 (b : bool) : result u32 :=
  if b then Return 0%u32 else Return 1%u32
.

(** [no_nested_borrows::test_shared_borrow_bool2]: forward function *)
Definition test_shared_borrow_bool2 : result u32 :=
  Return 0%u32.

(** [no_nested_borrows::test_shared_borrow_enum1]: forward function *)
Definition test_shared_borrow_enum1 (l : List_t u32) : result u32 :=
  match l with | List_Cons i l0 => Return 1%u32 | List_Nil => Return 0%u32 end
.

(** [no_nested_borrows::test_shared_borrow_enum2]: forward function *)
Definition test_shared_borrow_enum2 : result u32 :=
  Return 0%u32.

End NoNestedBorrows .
