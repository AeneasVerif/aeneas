(** THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS *)
(** [adt_borrows] *)
Require Import Primitives.
Import Primitives.
Require Import Coq.ZArith.ZArith.
Require Import List.
Import ListNotations.
Local Open Scope Primitives_scope.
Module AdtBorrows.

(** [adt_borrows::SharedWrapper]
    Source: 'tests/src/adt-borrows.rs', lines 4:0-4:35 *)
Definition SharedWrapper_t (T : Type) : Type := T.

(** [adt_borrows::{adt_borrows::SharedWrapper<'a, T>}::create]:
    Source: 'tests/src/adt-borrows.rs', lines 7:4-9:5 *)
Definition sharedWrapper_create
  {T : Type} (x : T) : result (SharedWrapper_t T) :=
  Ok x
.

(** [adt_borrows::{adt_borrows::SharedWrapper<'a, T>}::unwrap]:
    Source: 'tests/src/adt-borrows.rs', lines 11:4-13:5 *)
Definition sharedWrapper_unwrap
  {T : Type} (self : SharedWrapper_t T) : result T :=
  Ok self
.

(** [adt_borrows::use_shared_wrapper]:
    Source: 'tests/src/adt-borrows.rs', lines 16:0-21:1 *)
Definition use_shared_wrapper : result unit :=
  w <- sharedWrapper_create 0%i32;
  p <- sharedWrapper_unwrap w;
  massert (0%i32 s= p)
.

(** [adt_borrows::SharedWrapper1]
    Source: 'tests/src/adt-borrows.rs', lines 23:0-25:1 *)
Record SharedWrapper1_t (T : Type) :=
mkSharedWrapper1_t {
  sharedWrapper1_x : T;
}
.

Arguments mkSharedWrapper1_t { _ }.
Arguments sharedWrapper1_x { _ }.

(** [adt_borrows::{adt_borrows::SharedWrapper1<'a, T>}#1::create]:
    Source: 'tests/src/adt-borrows.rs', lines 28:4-30:5 *)
Definition sharedWrapper1_create
  {T : Type} (x : T) : result (SharedWrapper1_t T) :=
  Ok {| sharedWrapper1_x := x |}
.

(** [adt_borrows::{adt_borrows::SharedWrapper1<'a, T>}#1::unwrap]:
    Source: 'tests/src/adt-borrows.rs', lines 32:4-34:5 *)
Definition sharedWrapper1_unwrap
  {T : Type} (self : SharedWrapper1_t T) : result T :=
  Ok self.(sharedWrapper1_x)
.

(** [adt_borrows::use_shared_wrapper1]:
    Source: 'tests/src/adt-borrows.rs', lines 37:0-42:1 *)
Definition use_shared_wrapper1 : result unit :=
  w <- sharedWrapper1_create 0%i32;
  p <- sharedWrapper1_unwrap w;
  massert (0%i32 s= p)
.

(** [adt_borrows::SharedWrapper2]
    Source: 'tests/src/adt-borrows.rs', lines 44:0-47:1 *)
Record SharedWrapper2_t (T : Type) :=
mkSharedWrapper2_t {
  sharedWrapper2_x : T; sharedWrapper2_y : T;
}
.

Arguments mkSharedWrapper2_t { _ }.
Arguments sharedWrapper2_x { _ }.
Arguments sharedWrapper2_y { _ }.

(** [adt_borrows::{adt_borrows::SharedWrapper2<'a, 'b, T>}#2::create]:
    Source: 'tests/src/adt-borrows.rs', lines 50:4-52:5 *)
Definition sharedWrapper2_create
  {T : Type} (x : T) (y : T) : result (SharedWrapper2_t T) :=
  Ok {| sharedWrapper2_x := x; sharedWrapper2_y := y |}
.

(** [adt_borrows::{adt_borrows::SharedWrapper2<'a, 'b, T>}#2::unwrap]:
    Source: 'tests/src/adt-borrows.rs', lines 54:4-56:5 *)
Definition sharedWrapper2_unwrap
  {T : Type} (self : SharedWrapper2_t T) : result (T * T) :=
  Ok (self.(sharedWrapper2_x), self.(sharedWrapper2_y))
.

(** [adt_borrows::use_shared_wrapper2]:
    Source: 'tests/src/adt-borrows.rs', lines 59:0-66:1 *)
Definition use_shared_wrapper2 : result unit :=
  w <- sharedWrapper2_create 0%i32 1%i32;
  p <- sharedWrapper2_unwrap w;
  let (px, py) := p in
  _ <- massert (0%i32 s= px);
  massert (1%i32 s= py)
.

(** [adt_borrows::MutWrapper]
    Source: 'tests/src/adt-borrows.rs', lines 68:0-68:36 *)
Definition MutWrapper_t (T : Type) : Type := T.

(** [adt_borrows::{adt_borrows::MutWrapper<'a, T>}#3::create]:
    Source: 'tests/src/adt-borrows.rs', lines 71:4-73:5 *)
Definition mutWrapper_create
  {T : Type} (x : T) : result ((MutWrapper_t T) * (MutWrapper_t T -> T)) :=
  let back := fun (ret : MutWrapper_t T) => ret in Ok (x, back)
.

(** [adt_borrows::{adt_borrows::MutWrapper<'a, T>}#3::unwrap]:
    Source: 'tests/src/adt-borrows.rs', lines 75:4-77:5 *)
Definition mutWrapper_unwrap
  {T : Type} (self : MutWrapper_t T) : result (T * (T -> MutWrapper_t T)) :=
  let back := fun (ret : T) => ret in Ok (self, back)
.

(** [adt_borrows::use_mut_wrapper]:
    Source: 'tests/src/adt-borrows.rs', lines 80:0-86:1 *)
Definition use_mut_wrapper : result unit :=
  p <- mutWrapper_create 0%i32;
  let (w, create_back) := p in
  p1 <- mutWrapper_unwrap w;
  let (p2, unwrap_back) := p1 in
  p3 <- i32_add p2 1%i32;
  let x := create_back (unwrap_back p3) in
  massert (x s= 1%i32)
.

(** [adt_borrows::MutWrapper1]
    Source: 'tests/src/adt-borrows.rs', lines 88:0-90:1 *)
Record MutWrapper1_t (T : Type) := mkMutWrapper1_t { mutWrapper1_x : T; }.

Arguments mkMutWrapper1_t { _ }.
Arguments mutWrapper1_x { _ }.

(** [adt_borrows::{adt_borrows::MutWrapper1<'a, T>}#4::create]:
    Source: 'tests/src/adt-borrows.rs', lines 93:4-95:5 *)
Definition mutWrapper1_create
  {T : Type} (x : T) : result ((MutWrapper1_t T) * (MutWrapper1_t T -> T)) :=
  let back := fun (ret : MutWrapper1_t T) => ret.(mutWrapper1_x) in
  Ok ({| mutWrapper1_x := x |}, back)
.

(** [adt_borrows::{adt_borrows::MutWrapper1<'a, T>}#4::unwrap]:
    Source: 'tests/src/adt-borrows.rs', lines 97:4-99:5 *)
Definition mutWrapper1_unwrap
  {T : Type} (self : MutWrapper1_t T) : result (T * (T -> MutWrapper1_t T)) :=
  let back := fun (ret : T) => {| mutWrapper1_x := ret |} in
  Ok (self.(mutWrapper1_x), back)
.

(** [adt_borrows::use_mut_wrapper1]:
    Source: 'tests/src/adt-borrows.rs', lines 102:0-108:1 *)
Definition use_mut_wrapper1 : result unit :=
  p <- mutWrapper1_create 0%i32;
  let (w, create_back) := p in
  p1 <- mutWrapper1_unwrap w;
  let (p2, unwrap_back) := p1 in
  p3 <- i32_add p2 1%i32;
  let x := create_back (unwrap_back p3) in
  massert (x s= 1%i32)
.

(** [adt_borrows::MutWrapper2]
    Source: 'tests/src/adt-borrows.rs', lines 110:0-113:1 *)
Record MutWrapper2_t (T : Type) :=
mkMutWrapper2_t {
  mutWrapper2_x : T; mutWrapper2_y : T;
}
.

Arguments mkMutWrapper2_t { _ }.
Arguments mutWrapper2_x { _ }.
Arguments mutWrapper2_y { _ }.

(** [adt_borrows::{adt_borrows::MutWrapper2<'a, 'b, T>}#5::create]:
    Source: 'tests/src/adt-borrows.rs', lines 116:4-118:5 *)
Definition mutWrapper2_create
  {T : Type} (x : T) (y : T) :
  result ((MutWrapper2_t T) * (MutWrapper2_t T -> T) * (MutWrapper2_t T -> T))
  :=
  let back'a := fun (ret : MutWrapper2_t T) => ret.(mutWrapper2_x) in
  let back'b := fun (ret : MutWrapper2_t T) => ret.(mutWrapper2_y) in
  Ok ({| mutWrapper2_x := x; mutWrapper2_y := y |}, back'a, back'b)
.

(** [adt_borrows::{adt_borrows::MutWrapper2<'a, 'b, T>}#5::unwrap]:
    Source: 'tests/src/adt-borrows.rs', lines 120:4-122:5 *)
Definition mutWrapper2_unwrap
  {T : Type} (self : MutWrapper2_t T) :
  result ((T * T) * (T -> MutWrapper2_t T) * (T -> MutWrapper2_t T))
  :=
  let back'a :=
    fun (ret : T) =>
      {| mutWrapper2_x := ret; mutWrapper2_y := self.(mutWrapper2_y) |} in
  let back'b :=
    fun (ret : T) =>
      {| mutWrapper2_x := self.(mutWrapper2_x); mutWrapper2_y := ret |} in
  Ok ((self.(mutWrapper2_x), self.(mutWrapper2_y)), back'a, back'b)
.

(** [adt_borrows::use_mut_wrapper2]:
    Source: 'tests/src/adt-borrows.rs', lines 125:0-134:1 *)
Definition use_mut_wrapper2 : result unit :=
  t <- mutWrapper2_create 0%i32 10%i32;
  let '(w, create_back, create_back1) := t in
  t1 <- mutWrapper2_unwrap w;
  let '(p, unwrap_back, unwrap_back1) := t1 in
  let (px, py) := p in
  px1 <- i32_add px 1%i32;
  py1 <- i32_add py 1%i32;
  let x :=
    create_back
      {|
        mutWrapper2_x := (unwrap_back px1).(mutWrapper2_x);
        mutWrapper2_y := w.(mutWrapper2_y)
      |} in
  _ <- massert (x s= 1%i32);
  let y :=
    create_back1
      {|
        mutWrapper2_x := w.(mutWrapper2_x);
        mutWrapper2_y := (unwrap_back1 py1).(mutWrapper2_y)
      |} in
  massert (y s= 11%i32)
.

(** [adt_borrows::array_shared_borrow]:
    Source: 'tests/src/adt-borrows.rs', lines 143:0-145:1 *)
Definition array_shared_borrow
  {N : usize} (x : array u32 N) : result (array u32 N) :=
  Ok x
.

(** [adt_borrows::array_mut_borrow]:
    Source: 'tests/src/adt-borrows.rs', lines 147:0-149:1 *)
Definition array_mut_borrow
  {N : usize} (x : array u32 N) :
  result ((array u32 N) * (array u32 N -> array u32 N))
  :=
  let back := fun (ret : array u32 N) => ret in Ok (x, back)
.

(** [adt_borrows::boxed_slice_shared_borrow]:
    Source: 'tests/src/adt-borrows.rs', lines 151:0-153:1 *)
Definition boxed_slice_shared_borrow (x : slice u32) : result (slice u32) :=
  Ok x
.

(** [adt_borrows::boxed_slice_mut_borrow]:
    Source: 'tests/src/adt-borrows.rs', lines 155:0-157:1 *)
Definition boxed_slice_mut_borrow
  (x : slice u32) : result ((slice u32) * (slice u32 -> slice u32)) :=
  let back := fun (ret : slice u32) => ret in Ok (x, back)
.

End AdtBorrows.
