(** THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS *)
(** [adt_borrows] *)
Require Import Primitives.
Import Primitives.
Require Import Coq.ZArith.ZArith.
Require Import List.
Import ListNotations.
Local Open Scope Primitives_scope.
Module AdtBorrows.

(** [adt_borrows::SharedWrapper]
    Source: 'tests/src/adt-borrows.rs', lines 4:0-4:35 *)
Definition SharedWrapper_t (T : Type) : Type := T.

(** [adt_borrows::{adt_borrows::SharedWrapper<'a, T>}::create]:
    Source: 'tests/src/adt-borrows.rs', lines 7:4-9:5 *)
Definition sharedWrapper_create
  {T : Type} (x : T) : result (SharedWrapper_t T) :=
  Ok x
.

(** [adt_borrows::{adt_borrows::SharedWrapper<'a, T>}::unwrap]:
    Source: 'tests/src/adt-borrows.rs', lines 11:4-13:5 *)
Definition sharedWrapper_unwrap
  {T : Type} (self : SharedWrapper_t T) : result T :=
  Ok self
.

(** [adt_borrows::SharedWrapper1]
    Source: 'tests/src/adt-borrows.rs', lines 16:0-18:1 *)
Record SharedWrapper1_t (T : Type) :=
mkSharedWrapper1_t {
  sharedWrapper1_x : T;
}
.

Arguments mkSharedWrapper1_t { _ }.
Arguments sharedWrapper1_x { _ }.

(** [adt_borrows::{adt_borrows::SharedWrapper1<'a, T>}#1::create]:
    Source: 'tests/src/adt-borrows.rs', lines 21:4-23:5 *)
Definition sharedWrapper1_create
  {T : Type} (x : T) : result (SharedWrapper1_t T) :=
  Ok {| sharedWrapper1_x := x |}
.

(** [adt_borrows::{adt_borrows::SharedWrapper1<'a, T>}#1::unwrap]:
    Source: 'tests/src/adt-borrows.rs', lines 25:4-27:5 *)
Definition sharedWrapper1_unwrap
  {T : Type} (self : SharedWrapper1_t T) : result T :=
  Ok self.(sharedWrapper1_x)
.

(** [adt_borrows::SharedWrapper2]
    Source: 'tests/src/adt-borrows.rs', lines 30:0-33:1 *)
Record SharedWrapper2_t (T : Type) :=
mkSharedWrapper2_t {
  sharedWrapper2_x : T; sharedWrapper2_y : T;
}
.

Arguments mkSharedWrapper2_t { _ }.
Arguments sharedWrapper2_x { _ }.
Arguments sharedWrapper2_y { _ }.

(** [adt_borrows::{adt_borrows::SharedWrapper2<'a, 'b, T>}#2::create]:
    Source: 'tests/src/adt-borrows.rs', lines 36:4-38:5 *)
Definition sharedWrapper2_create
  {T : Type} (x : T) (y : T) : result (SharedWrapper2_t T) :=
  Ok {| sharedWrapper2_x := x; sharedWrapper2_y := y |}
.

(** [adt_borrows::{adt_borrows::SharedWrapper2<'a, 'b, T>}#2::unwrap]:
    Source: 'tests/src/adt-borrows.rs', lines 40:4-42:5 *)
Definition sharedWrapper2_unwrap
  {T : Type} (self : SharedWrapper2_t T) : result (T * T) :=
  Ok (self.(sharedWrapper2_x), self.(sharedWrapper2_y))
.

(** [adt_borrows::MutWrapper]
    Source: 'tests/src/adt-borrows.rs', lines 45:0-45:36 *)
Definition MutWrapper_t (T : Type) : Type := T.

(** [adt_borrows::{adt_borrows::MutWrapper<'a, T>}#3::create]:
    Source: 'tests/src/adt-borrows.rs', lines 48:4-50:5 *)
Definition mutWrapper_create
  {T : Type} (x : T) : result ((MutWrapper_t T) * (MutWrapper_t T -> T)) :=
  let back := fun (ret : MutWrapper_t T) => ret in Ok (x, back)
.

(** [adt_borrows::{adt_borrows::MutWrapper<'a, T>}#3::unwrap]:
    Source: 'tests/src/adt-borrows.rs', lines 52:4-54:5 *)
Definition mutWrapper_unwrap
  {T : Type} (self : MutWrapper_t T) : result (T * (T -> MutWrapper_t T)) :=
  let back := fun (ret : T) => ret in Ok (self, back)
.

(** [adt_borrows::MutWrapper1]
    Source: 'tests/src/adt-borrows.rs', lines 57:0-59:1 *)
Record MutWrapper1_t (T : Type) := mkMutWrapper1_t { mutWrapper1_x : T; }.

Arguments mkMutWrapper1_t { _ }.
Arguments mutWrapper1_x { _ }.

(** [adt_borrows::{adt_borrows::MutWrapper1<'a, T>}#4::create]:
    Source: 'tests/src/adt-borrows.rs', lines 62:4-64:5 *)
Definition mutWrapper1_create
  {T : Type} (x : T) : result ((MutWrapper1_t T) * (MutWrapper1_t T -> T)) :=
  let back := fun (ret : MutWrapper1_t T) => ret.(mutWrapper1_x) in
  Ok ({| mutWrapper1_x := x |}, back)
.

(** [adt_borrows::{adt_borrows::MutWrapper1<'a, T>}#4::unwrap]:
    Source: 'tests/src/adt-borrows.rs', lines 66:4-68:5 *)
Definition mutWrapper1_unwrap
  {T : Type} (self : MutWrapper1_t T) : result (T * (T -> MutWrapper1_t T)) :=
  let back := fun (ret : T) => {| mutWrapper1_x := ret |} in
  Ok (self.(mutWrapper1_x), back)
.

(** [adt_borrows::MutWrapper2]
    Source: 'tests/src/adt-borrows.rs', lines 71:0-74:1 *)
Record MutWrapper2_t (T : Type) :=
mkMutWrapper2_t {
  mutWrapper2_x : T; mutWrapper2_y : T;
}
.

Arguments mkMutWrapper2_t { _ }.
Arguments mutWrapper2_x { _ }.
Arguments mutWrapper2_y { _ }.

(** [adt_borrows::{adt_borrows::MutWrapper2<'a, 'b, T>}#5::create]:
    Source: 'tests/src/adt-borrows.rs', lines 77:4-79:5 *)
Definition mutWrapper2_create
  {T : Type} (x : T) (y : T) :
  result ((MutWrapper2_t T) * (MutWrapper2_t T -> T) * (MutWrapper2_t T -> T))
  :=
  let back'a := fun (ret : MutWrapper2_t T) => ret.(mutWrapper2_x) in
  let back'b := fun (ret : MutWrapper2_t T) => ret.(mutWrapper2_y) in
  Ok ({| mutWrapper2_x := x; mutWrapper2_y := y |}, back'a, back'b)
.

(** [adt_borrows::{adt_borrows::MutWrapper2<'a, 'b, T>}#5::unwrap]:
    Source: 'tests/src/adt-borrows.rs', lines 81:4-83:5 *)
Definition mutWrapper2_unwrap
  {T : Type} (self : MutWrapper2_t T) :
  result ((T * T) * (T -> MutWrapper2_t T) * (T -> MutWrapper2_t T))
  :=
  let back'a :=
    fun (ret : T) =>
      {| mutWrapper2_x := ret; mutWrapper2_y := self.(mutWrapper2_y) |} in
  let back'b :=
    fun (ret : T) =>
      {| mutWrapper2_x := self.(mutWrapper2_x); mutWrapper2_y := ret |} in
  Ok ((self.(mutWrapper2_x), self.(mutWrapper2_y)), back'a, back'b)
.

End AdtBorrows.
