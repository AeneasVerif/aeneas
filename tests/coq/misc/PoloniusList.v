(** THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS *)
(** [polonius_list] *)
Require Import Primitives.
Import Primitives.
Require Import Coq.ZArith.ZArith.
Require Import List.
Import ListNotations.
Local Open Scope Primitives_scope.
Module PoloniusList.

(** [polonius_list::List]
    Source: 'src/polonius_list.rs', lines 3:0-3:16 *)
Inductive List_t (T : Type) :=
| List_Cons : T -> List_t T -> List_t T
| List_Nil : List_t T
.

Arguments List_Cons { _ }.
Arguments List_Nil { _ }.

(** [polonius_list::get_list_at_x]: forward function
    Source: 'src/polonius_list.rs', lines 13:0-13:76 *)
Fixpoint get_list_at_x (ls : List_t u32) (x : u32) : result (List_t u32) :=
  match ls with
  | List_Cons hd tl =>
    if hd s= x then Return (List_Cons hd tl) else get_list_at_x tl x
  | List_Nil => Return List_Nil
  end
.

(** [polonius_list::get_list_at_x]: backward function 0
    Source: 'src/polonius_list.rs', lines 13:0-13:76 *)
Fixpoint get_list_at_x_back
  (ls : List_t u32) (x : u32) (ret : List_t u32) : result (List_t u32) :=
  match ls with
  | List_Cons hd tl =>
    if hd s= x
    then Return ret
    else (tl0 <- get_list_at_x_back tl x ret; Return (List_Cons hd tl0))
  | List_Nil => Return ret
  end
.

End PoloniusList.
