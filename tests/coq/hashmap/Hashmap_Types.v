(** THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS *)
(** [hashmap]: type definitions *)
Require Import Primitives.
Import Primitives.
Require Import Coq.ZArith.ZArith.
Require Import List.
Import ListNotations.
Local Open Scope Primitives_scope.
Module Hashmap_Types.

(** [hashmap::List] *)
Inductive List_t (T : Type) :=
| List_Cons : usize -> T -> List_t T -> List_t T
| List_Nil : List_t T
.

Arguments List_Cons {T} _ _ _.
Arguments List_Nil {T}.

(** [hashmap::HashMap] *)
Record HashMap_t (T : Type) :=
mkHashMap_t {
  hashMap_num_entries : usize;
  hashMap_max_load_factor : (usize * usize);
  hashMap_max_load : usize;
  hashMap_slots : alloc_vec_Vec (List_t T);
}
.

Arguments mkHashMap_t {T} _ _ _ _.
Arguments hashMap_num_entries {T}.
Arguments hashMap_max_load_factor {T}.
Arguments hashMap_max_load {T}.
Arguments hashMap_slots {T}.

End Hashmap_Types .
