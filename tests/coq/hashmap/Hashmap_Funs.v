(** THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS *)
(** [hashmap]: function definitions *)
Require Import Primitives.
Import Primitives.
Require Import Coq.ZArith.ZArith.
Require Import List.
Import ListNotations.
Local Open Scope Primitives_scope.
Require Export Hashmap_Types.
Import Hashmap_Types.
Module Hashmap_Funs.

(** [hashmap::hash_key]: forward function *)
Definition hash_key (k : usize) : result usize :=
  Return k.

(** [hashmap::HashMap::{0}::allocate_slots]: loop 0: forward function *)
Fixpoint hashMap_allocate_slots_loop
  (T : Type) (n : nat) (slots : alloc_vec_Vec (List_t T)) (n0 : usize) :
  result (alloc_vec_Vec (List_t T))
  :=
  match n with
  | O => Fail_ OutOfFuel
  | S n1 =>
    if n0 s> 0%usize
    then (
      slots0 <- alloc_vec_Vec_push (List_t T) slots List_Nil;
      n2 <- usize_sub n0 1%usize;
      hashMap_allocate_slots_loop T n1 slots0 n2)
    else Return slots
  end
.

(** [hashmap::HashMap::{0}::allocate_slots]: forward function *)
Definition hashMap_allocate_slots
  (T : Type) (n : nat) (slots : alloc_vec_Vec (List_t T)) (n0 : usize) :
  result (alloc_vec_Vec (List_t T))
  :=
  hashMap_allocate_slots_loop T n slots n0
.

(** [hashmap::HashMap::{0}::new_with_capacity]: forward function *)
Definition hashMap_new_with_capacity
  (T : Type) (n : nat) (capacity : usize) (max_load_dividend : usize)
  (max_load_divisor : usize) :
  result (HashMap_t T)
  :=
  let v := alloc_vec_Vec_new (List_t T) in
  slots <- hashMap_allocate_slots T n v capacity;
  i <- usize_mul capacity max_load_dividend;
  i0 <- usize_div i max_load_divisor;
  Return
    {|
      hashMap_num_entries := 0%usize;
      hashMap_max_load_factor := (max_load_dividend, max_load_divisor);
      hashMap_max_load := i0;
      hashMap_slots := slots
    |}
.

(** [hashmap::HashMap::{0}::new]: forward function *)
Definition hashMap_new (T : Type) (n : nat) : result (HashMap_t T) :=
  hashMap_new_with_capacity T n 32%usize 4%usize 5%usize
.

(** [hashmap::HashMap::{0}::clear]: loop 0: merged forward/backward function
    (there is a single backward function, and the forward function returns ()) *)
Fixpoint hashMap_clear_loop
  (T : Type) (n : nat) (slots : alloc_vec_Vec (List_t T)) (i : usize) :
  result (alloc_vec_Vec (List_t T))
  :=
  match n with
  | O => Fail_ OutOfFuel
  | S n0 =>
    let i0 := alloc_vec_Vec_len (List_t T) slots in
    if i s< i0
    then (
      i1 <- usize_add i 1%usize;
      slots0 <-
        alloc_vec_Vec_index_mut_back (List_t T) usize
          (core_slice_index_usize_coresliceindexSliceIndexInst (List_t T))
          slots i List_Nil;
      hashMap_clear_loop T n0 slots0 i1)
    else Return slots
  end
.

(** [hashmap::HashMap::{0}::clear]: merged forward/backward function
    (there is a single backward function, and the forward function returns ()) *)
Definition hashMap_clear
  (T : Type) (n : nat) (self : HashMap_t T) : result (HashMap_t T) :=
  v <- hashMap_clear_loop T n self.(hashMap_slots) 0%usize;
  Return
    {|
      hashMap_num_entries := 0%usize;
      hashMap_max_load_factor := self.(hashMap_max_load_factor);
      hashMap_max_load := self.(hashMap_max_load);
      hashMap_slots := v
    |}
.

(** [hashmap::HashMap::{0}::len]: forward function *)
Definition hashMap_len (T : Type) (self : HashMap_t T) : result usize :=
  Return self.(hashMap_num_entries)
.

(** [hashmap::HashMap::{0}::insert_in_list]: loop 0: forward function *)
Fixpoint hashMap_insert_in_list_loop
  (T : Type) (n : nat) (key : usize) (value : T) (ls : List_t T) :
  result bool
  :=
  match n with
  | O => Fail_ OutOfFuel
  | S n0 =>
    match ls with
    | List_Cons ckey cvalue tl =>
      if ckey s= key
      then Return false
      else hashMap_insert_in_list_loop T n0 key value tl
    | List_Nil => Return true
    end
  end
.

(** [hashmap::HashMap::{0}::insert_in_list]: forward function *)
Definition hashMap_insert_in_list
  (T : Type) (n : nat) (key : usize) (value : T) (ls : List_t T) :
  result bool
  :=
  hashMap_insert_in_list_loop T n key value ls
.

(** [hashmap::HashMap::{0}::insert_in_list]: loop 0: backward function 0 *)
Fixpoint hashMap_insert_in_list_loop_back
  (T : Type) (n : nat) (key : usize) (value : T) (ls : List_t T) :
  result (List_t T)
  :=
  match n with
  | O => Fail_ OutOfFuel
  | S n0 =>
    match ls with
    | List_Cons ckey cvalue tl =>
      if ckey s= key
      then Return (List_Cons ckey value tl)
      else (
        tl0 <- hashMap_insert_in_list_loop_back T n0 key value tl;
        Return (List_Cons ckey cvalue tl0))
    | List_Nil => let l := List_Nil in Return (List_Cons key value l)
    end
  end
.

(** [hashmap::HashMap::{0}::insert_in_list]: backward function 0 *)
Definition hashMap_insert_in_list_back
  (T : Type) (n : nat) (key : usize) (value : T) (ls : List_t T) :
  result (List_t T)
  :=
  hashMap_insert_in_list_loop_back T n key value ls
.

(** [hashmap::HashMap::{0}::insert_no_resize]: merged forward/backward function
    (there is a single backward function, and the forward function returns ()) *)
Definition hashMap_insert_no_resize
  (T : Type) (n : nat) (self : HashMap_t T) (key : usize) (value : T) :
  result (HashMap_t T)
  :=
  hash <- hash_key key;
  let i := alloc_vec_Vec_len (List_t T) self.(hashMap_slots) in
  hash_mod <- usize_rem hash i;
  l <-
    alloc_vec_Vec_index_mut (List_t T) usize
      (core_slice_index_usize_coresliceindexSliceIndexInst (List_t T))
      self.(hashMap_slots) hash_mod;
  inserted <- hashMap_insert_in_list T n key value l;
  if inserted
  then (
    i0 <- usize_add self.(hashMap_num_entries) 1%usize;
    l0 <- hashMap_insert_in_list_back T n key value l;
    v <-
      alloc_vec_Vec_index_mut_back (List_t T) usize
        (core_slice_index_usize_coresliceindexSliceIndexInst (List_t T))
        self.(hashMap_slots) hash_mod l0;
    Return
      {|
        hashMap_num_entries := i0;
        hashMap_max_load_factor := self.(hashMap_max_load_factor);
        hashMap_max_load := self.(hashMap_max_load);
        hashMap_slots := v
      |})
  else (
    l0 <- hashMap_insert_in_list_back T n key value l;
    v <-
      alloc_vec_Vec_index_mut_back (List_t T) usize
        (core_slice_index_usize_coresliceindexSliceIndexInst (List_t T))
        self.(hashMap_slots) hash_mod l0;
    Return
      {|
        hashMap_num_entries := self.(hashMap_num_entries);
        hashMap_max_load_factor := self.(hashMap_max_load_factor);
        hashMap_max_load := self.(hashMap_max_load);
        hashMap_slots := v
      |})
.

(** [hashmap::HashMap::{0}::move_elements_from_list]: loop 0: merged forward/backward function
    (there is a single backward function, and the forward function returns ()) *)
Fixpoint hashMap_move_elements_from_list_loop
  (T : Type) (n : nat) (ntable : HashMap_t T) (ls : List_t T) :
  result (HashMap_t T)
  :=
  match n with
  | O => Fail_ OutOfFuel
  | S n0 =>
    match ls with
    | List_Cons k v tl =>
      ntable0 <- hashMap_insert_no_resize T n0 ntable k v;
      hashMap_move_elements_from_list_loop T n0 ntable0 tl
    | List_Nil => Return ntable
    end
  end
.

(** [hashmap::HashMap::{0}::move_elements_from_list]: merged forward/backward function
    (there is a single backward function, and the forward function returns ()) *)
Definition hashMap_move_elements_from_list
  (T : Type) (n : nat) (ntable : HashMap_t T) (ls : List_t T) :
  result (HashMap_t T)
  :=
  hashMap_move_elements_from_list_loop T n ntable ls
.

(** [hashmap::HashMap::{0}::move_elements]: loop 0: merged forward/backward function
    (there is a single backward function, and the forward function returns ()) *)
Fixpoint hashMap_move_elements_loop
  (T : Type) (n : nat) (ntable : HashMap_t T)
  (slots : alloc_vec_Vec (List_t T)) (i : usize) :
  result ((HashMap_t T) * (alloc_vec_Vec (List_t T)))
  :=
  match n with
  | O => Fail_ OutOfFuel
  | S n0 =>
    let i0 := alloc_vec_Vec_len (List_t T) slots in
    if i s< i0
    then (
      l <-
        alloc_vec_Vec_index_mut (List_t T) usize
          (core_slice_index_usize_coresliceindexSliceIndexInst (List_t T))
          slots i;
      let ls := core_mem_replace (List_t T) l List_Nil in
      ntable0 <- hashMap_move_elements_from_list T n0 ntable ls;
      i1 <- usize_add i 1%usize;
      let l0 := core_mem_replace_back (List_t T) l List_Nil in
      slots0 <-
        alloc_vec_Vec_index_mut_back (List_t T) usize
          (core_slice_index_usize_coresliceindexSliceIndexInst (List_t T))
          slots i l0;
      hashMap_move_elements_loop T n0 ntable0 slots0 i1)
    else Return (ntable, slots)
  end
.

(** [hashmap::HashMap::{0}::move_elements]: merged forward/backward function
    (there is a single backward function, and the forward function returns ()) *)
Definition hashMap_move_elements
  (T : Type) (n : nat) (ntable : HashMap_t T)
  (slots : alloc_vec_Vec (List_t T)) (i : usize) :
  result ((HashMap_t T) * (alloc_vec_Vec (List_t T)))
  :=
  hashMap_move_elements_loop T n ntable slots i
.

(** [hashmap::HashMap::{0}::try_resize]: merged forward/backward function
    (there is a single backward function, and the forward function returns ()) *)
Definition hashMap_try_resize
  (T : Type) (n : nat) (self : HashMap_t T) : result (HashMap_t T) :=
  max_usize <- scalar_cast U32 Usize core_u32_max;
  let capacity := alloc_vec_Vec_len (List_t T) self.(hashMap_slots) in
  n1 <- usize_div max_usize 2%usize;
  let (i, i0) := self.(hashMap_max_load_factor) in
  i1 <- usize_div n1 i;
  if capacity s<= i1
  then (
    i2 <- usize_mul capacity 2%usize;
    ntable <- hashMap_new_with_capacity T n i2 i i0;
    p <- hashMap_move_elements T n ntable self.(hashMap_slots) 0%usize;
    let (ntable0, _) := p in
    Return
      {|
        hashMap_num_entries := self.(hashMap_num_entries);
        hashMap_max_load_factor := (i, i0);
        hashMap_max_load := ntable0.(hashMap_max_load);
        hashMap_slots := ntable0.(hashMap_slots)
      |})
  else
    Return
      {|
        hashMap_num_entries := self.(hashMap_num_entries);
        hashMap_max_load_factor := (i, i0);
        hashMap_max_load := self.(hashMap_max_load);
        hashMap_slots := self.(hashMap_slots)
      |}
.

(** [hashmap::HashMap::{0}::insert]: merged forward/backward function
    (there is a single backward function, and the forward function returns ()) *)
Definition hashMap_insert
  (T : Type) (n : nat) (self : HashMap_t T) (key : usize) (value : T) :
  result (HashMap_t T)
  :=
  self0 <- hashMap_insert_no_resize T n self key value;
  i <- hashMap_len T self0;
  if i s> self0.(hashMap_max_load)
  then hashMap_try_resize T n self0
  else Return self0
.

(** [hashmap::HashMap::{0}::contains_key_in_list]: loop 0: forward function *)
Fixpoint hashMap_contains_key_in_list_loop
  (T : Type) (n : nat) (key : usize) (ls : List_t T) : result bool :=
  match n with
  | O => Fail_ OutOfFuel
  | S n0 =>
    match ls with
    | List_Cons ckey t tl =>
      if ckey s= key
      then Return true
      else hashMap_contains_key_in_list_loop T n0 key tl
    | List_Nil => Return false
    end
  end
.

(** [hashmap::HashMap::{0}::contains_key_in_list]: forward function *)
Definition hashMap_contains_key_in_list
  (T : Type) (n : nat) (key : usize) (ls : List_t T) : result bool :=
  hashMap_contains_key_in_list_loop T n key ls
.

(** [hashmap::HashMap::{0}::contains_key]: forward function *)
Definition hashMap_contains_key
  (T : Type) (n : nat) (self : HashMap_t T) (key : usize) : result bool :=
  hash <- hash_key key;
  let i := alloc_vec_Vec_len (List_t T) self.(hashMap_slots) in
  hash_mod <- usize_rem hash i;
  l <-
    alloc_vec_Vec_index (List_t T) usize
      (core_slice_index_usize_coresliceindexSliceIndexInst (List_t T))
      self.(hashMap_slots) hash_mod;
  hashMap_contains_key_in_list T n key l
.

(** [hashmap::HashMap::{0}::get_in_list]: loop 0: forward function *)
Fixpoint hashMap_get_in_list_loop
  (T : Type) (n : nat) (key : usize) (ls : List_t T) : result T :=
  match n with
  | O => Fail_ OutOfFuel
  | S n0 =>
    match ls with
    | List_Cons ckey cvalue tl =>
      if ckey s= key
      then Return cvalue
      else hashMap_get_in_list_loop T n0 key tl
    | List_Nil => Fail_ Failure
    end
  end
.

(** [hashmap::HashMap::{0}::get_in_list]: forward function *)
Definition hashMap_get_in_list
  (T : Type) (n : nat) (key : usize) (ls : List_t T) : result T :=
  hashMap_get_in_list_loop T n key ls
.

(** [hashmap::HashMap::{0}::get]: forward function *)
Definition hashMap_get
  (T : Type) (n : nat) (self : HashMap_t T) (key : usize) : result T :=
  hash <- hash_key key;
  let i := alloc_vec_Vec_len (List_t T) self.(hashMap_slots) in
  hash_mod <- usize_rem hash i;
  l <-
    alloc_vec_Vec_index (List_t T) usize
      (core_slice_index_usize_coresliceindexSliceIndexInst (List_t T))
      self.(hashMap_slots) hash_mod;
  hashMap_get_in_list T n key l
.

(** [hashmap::HashMap::{0}::get_mut_in_list]: loop 0: forward function *)
Fixpoint hashMap_get_mut_in_list_loop
  (T : Type) (n : nat) (ls : List_t T) (key : usize) : result T :=
  match n with
  | O => Fail_ OutOfFuel
  | S n0 =>
    match ls with
    | List_Cons ckey cvalue tl =>
      if ckey s= key
      then Return cvalue
      else hashMap_get_mut_in_list_loop T n0 tl key
    | List_Nil => Fail_ Failure
    end
  end
.

(** [hashmap::HashMap::{0}::get_mut_in_list]: forward function *)
Definition hashMap_get_mut_in_list
  (T : Type) (n : nat) (ls : List_t T) (key : usize) : result T :=
  hashMap_get_mut_in_list_loop T n ls key
.

(** [hashmap::HashMap::{0}::get_mut_in_list]: loop 0: backward function 0 *)
Fixpoint hashMap_get_mut_in_list_loop_back
  (T : Type) (n : nat) (ls : List_t T) (key : usize) (ret : T) :
  result (List_t T)
  :=
  match n with
  | O => Fail_ OutOfFuel
  | S n0 =>
    match ls with
    | List_Cons ckey cvalue tl =>
      if ckey s= key
      then Return (List_Cons ckey ret tl)
      else (
        tl0 <- hashMap_get_mut_in_list_loop_back T n0 tl key ret;
        Return (List_Cons ckey cvalue tl0))
    | List_Nil => Fail_ Failure
    end
  end
.

(** [hashmap::HashMap::{0}::get_mut_in_list]: backward function 0 *)
Definition hashMap_get_mut_in_list_back
  (T : Type) (n : nat) (ls : List_t T) (key : usize) (ret : T) :
  result (List_t T)
  :=
  hashMap_get_mut_in_list_loop_back T n ls key ret
.

(** [hashmap::HashMap::{0}::get_mut]: forward function *)
Definition hashMap_get_mut
  (T : Type) (n : nat) (self : HashMap_t T) (key : usize) : result T :=
  hash <- hash_key key;
  let i := alloc_vec_Vec_len (List_t T) self.(hashMap_slots) in
  hash_mod <- usize_rem hash i;
  l <-
    alloc_vec_Vec_index_mut (List_t T) usize
      (core_slice_index_usize_coresliceindexSliceIndexInst (List_t T))
      self.(hashMap_slots) hash_mod;
  hashMap_get_mut_in_list T n l key
.

(** [hashmap::HashMap::{0}::get_mut]: backward function 0 *)
Definition hashMap_get_mut_back
  (T : Type) (n : nat) (self : HashMap_t T) (key : usize) (ret : T) :
  result (HashMap_t T)
  :=
  hash <- hash_key key;
  let i := alloc_vec_Vec_len (List_t T) self.(hashMap_slots) in
  hash_mod <- usize_rem hash i;
  l <-
    alloc_vec_Vec_index_mut (List_t T) usize
      (core_slice_index_usize_coresliceindexSliceIndexInst (List_t T))
      self.(hashMap_slots) hash_mod;
  l0 <- hashMap_get_mut_in_list_back T n l key ret;
  v <-
    alloc_vec_Vec_index_mut_back (List_t T) usize
      (core_slice_index_usize_coresliceindexSliceIndexInst (List_t T))
      self.(hashMap_slots) hash_mod l0;
  Return
    {|
      hashMap_num_entries := self.(hashMap_num_entries);
      hashMap_max_load_factor := self.(hashMap_max_load_factor);
      hashMap_max_load := self.(hashMap_max_load);
      hashMap_slots := v
    |}
.

(** [hashmap::HashMap::{0}::remove_from_list]: loop 0: forward function *)
Fixpoint hashMap_remove_from_list_loop
  (T : Type) (n : nat) (key : usize) (ls : List_t T) : result (option T) :=
  match n with
  | O => Fail_ OutOfFuel
  | S n0 =>
    match ls with
    | List_Cons ckey t tl =>
      if ckey s= key
      then
        let mv_ls := core_mem_replace (List_t T) (List_Cons ckey t tl) List_Nil
          in
        match mv_ls with
        | List_Cons i cvalue tl0 => Return (Some cvalue)
        | List_Nil => Fail_ Failure
        end
      else hashMap_remove_from_list_loop T n0 key tl
    | List_Nil => Return None
    end
  end
.

(** [hashmap::HashMap::{0}::remove_from_list]: forward function *)
Definition hashMap_remove_from_list
  (T : Type) (n : nat) (key : usize) (ls : List_t T) : result (option T) :=
  hashMap_remove_from_list_loop T n key ls
.

(** [hashmap::HashMap::{0}::remove_from_list]: loop 0: backward function 1 *)
Fixpoint hashMap_remove_from_list_loop_back
  (T : Type) (n : nat) (key : usize) (ls : List_t T) : result (List_t T) :=
  match n with
  | O => Fail_ OutOfFuel
  | S n0 =>
    match ls with
    | List_Cons ckey t tl =>
      if ckey s= key
      then
        let mv_ls := core_mem_replace (List_t T) (List_Cons ckey t tl) List_Nil
          in
        match mv_ls with
        | List_Cons i cvalue tl0 => Return tl0
        | List_Nil => Fail_ Failure
        end
      else (
        tl0 <- hashMap_remove_from_list_loop_back T n0 key tl;
        Return (List_Cons ckey t tl0))
    | List_Nil => Return List_Nil
    end
  end
.

(** [hashmap::HashMap::{0}::remove_from_list]: backward function 1 *)
Definition hashMap_remove_from_list_back
  (T : Type) (n : nat) (key : usize) (ls : List_t T) : result (List_t T) :=
  hashMap_remove_from_list_loop_back T n key ls
.

(** [hashmap::HashMap::{0}::remove]: forward function *)
Definition hashMap_remove
  (T : Type) (n : nat) (self : HashMap_t T) (key : usize) :
  result (option T)
  :=
  hash <- hash_key key;
  let i := alloc_vec_Vec_len (List_t T) self.(hashMap_slots) in
  hash_mod <- usize_rem hash i;
  l <-
    alloc_vec_Vec_index_mut (List_t T) usize
      (core_slice_index_usize_coresliceindexSliceIndexInst (List_t T))
      self.(hashMap_slots) hash_mod;
  x <- hashMap_remove_from_list T n key l;
  match x with
  | None => Return None
  | Some x0 =>
    _ <- usize_sub self.(hashMap_num_entries) 1%usize; Return (Some x0)
  end
.

(** [hashmap::HashMap::{0}::remove]: backward function 0 *)
Definition hashMap_remove_back
  (T : Type) (n : nat) (self : HashMap_t T) (key : usize) :
  result (HashMap_t T)
  :=
  hash <- hash_key key;
  let i := alloc_vec_Vec_len (List_t T) self.(hashMap_slots) in
  hash_mod <- usize_rem hash i;
  l <-
    alloc_vec_Vec_index_mut (List_t T) usize
      (core_slice_index_usize_coresliceindexSliceIndexInst (List_t T))
      self.(hashMap_slots) hash_mod;
  x <- hashMap_remove_from_list T n key l;
  match x with
  | None =>
    l0 <- hashMap_remove_from_list_back T n key l;
    v <-
      alloc_vec_Vec_index_mut_back (List_t T) usize
        (core_slice_index_usize_coresliceindexSliceIndexInst (List_t T))
        self.(hashMap_slots) hash_mod l0;
    Return
      {|
        hashMap_num_entries := self.(hashMap_num_entries);
        hashMap_max_load_factor := self.(hashMap_max_load_factor);
        hashMap_max_load := self.(hashMap_max_load);
        hashMap_slots := v
      |}
  | Some x0 =>
    i0 <- usize_sub self.(hashMap_num_entries) 1%usize;
    l0 <- hashMap_remove_from_list_back T n key l;
    v <-
      alloc_vec_Vec_index_mut_back (List_t T) usize
        (core_slice_index_usize_coresliceindexSliceIndexInst (List_t T))
        self.(hashMap_slots) hash_mod l0;
    Return
      {|
        hashMap_num_entries := i0;
        hashMap_max_load_factor := self.(hashMap_max_load_factor);
        hashMap_max_load := self.(hashMap_max_load);
        hashMap_slots := v
      |}
  end
.

(** [hashmap::test1]: forward function *)
Definition test1 (n : nat) : result unit :=
  hm <- hashMap_new u64 n;
  hm0 <- hashMap_insert u64 n hm 0%usize 42%u64;
  hm1 <- hashMap_insert u64 n hm0 128%usize 18%u64;
  hm2 <- hashMap_insert u64 n hm1 1024%usize 138%u64;
  hm3 <- hashMap_insert u64 n hm2 1056%usize 256%u64;
  i <- hashMap_get u64 n hm3 128%usize;
  if negb (i s= 18%u64)
  then Fail_ Failure
  else (
    hm4 <- hashMap_get_mut_back u64 n hm3 1024%usize 56%u64;
    i0 <- hashMap_get u64 n hm4 1024%usize;
    if negb (i0 s= 56%u64)
    then Fail_ Failure
    else (
      x <- hashMap_remove u64 n hm4 1024%usize;
      match x with
      | None => Fail_ Failure
      | Some x0 =>
        if negb (x0 s= 56%u64)
        then Fail_ Failure
        else (
          hm5 <- hashMap_remove_back u64 n hm4 1024%usize;
          i1 <- hashMap_get u64 n hm5 0%usize;
          if negb (i1 s= 42%u64)
          then Fail_ Failure
          else (
            i2 <- hashMap_get u64 n hm5 128%usize;
            if negb (i2 s= 18%u64)
            then Fail_ Failure
            else (
              i3 <- hashMap_get u64 n hm5 1056%usize;
              if negb (i3 s= 256%u64) then Fail_ Failure else Return tt)))
      end))
.

End Hashmap_Funs .
